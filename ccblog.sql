/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : ccblog

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 16/02/2022 14:02:05
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for about
-- ----------------------------
DROP TABLE IF EXISTS `about`;
CREATE TABLE `about`  (
  `id` bigint(0) NOT NULL,
  `name_en` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `name_zh` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of about
-- ----------------------------
INSERT INTO `about` VALUES (1, 'title', '标题', '关于帅气的 Kudaompq');
INSERT INTO `about` VALUES (2, 'musicId', '网易云歌曲ID', '1441758494');
INSERT INTO `about` VALUES (3, 'content', '正文Markdown', '# 目前可以公布的信息\n* 我😎：在校大三学生一枚\n* 目标✍：Do Yourself\n* 爱好✨：摸鱼🐟！平时也喜欢打打球🏀还有LOL\n* 坐标📍: 沈阳\n\n## 关于这个博客\n一直都想写一个自己的博客，原来是用hexo搭建的，总算是在寒假把博客写出来了，前端基本上都是参考[Naccl](https://naccl.top/home)的，十分感谢！</br>自用博客只要不忙会一直更新维护的💪！');
INSERT INTO `about` VALUES (4, 'commentEnabled', '评论开关', 'true');

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章标题',
  `first_picture` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章首图，用于随机文章展示',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章正文',
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '描述',
  `is_published` bit(1) NOT NULL COMMENT '公开或私密',
  `is_recommend` bit(1) NOT NULL COMMENT '推荐开关',
  `is_appreciation` bit(1) NOT NULL COMMENT '赞赏开关',
  `is_comment_enabled` bit(1) NOT NULL COMMENT '评论开关',
  `create_time` datetime(0) NOT NULL COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL COMMENT '更新时间',
  `views` int(0) NOT NULL COMMENT '浏览次数',
  `category_id` bigint(0) NOT NULL COMMENT '文章分类',
  `is_top` bit(1) NOT NULL COMMENT '是否置顶',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `type_id`(`category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES (7, 'Github上传文件', 'https://cdn.jsdelivr.net/gh/Kudaompq/CDN/cover/20220214211941.png', '# git上传文件\n\n1. **git clone** [github上的地址]\n2. cd 文件夹\n3. **git add .** \n4. **git commit  -m  \"提交信息\"  （注：“提交信息”里面换成你需要，如“first commit”）**\n5. **git push -u origin main**\n\n> 由于Github在21年七夕节的更新，需要使用token才能上传\n\n[获取TOKEN地址](https://github.com/settings/tokens)\n\n然后输入下方命令\n\n```bash\ngit remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git\n <your_token>：换成你自己得到的token\n <USERNAME>：是你自己github的用户名\n <REPO>：是你的仓库名称\n```\n\n', '', b'1', b'1', b'1', b'1', '2022-02-14 21:22:04', '2022-02-14 21:34:29', 0, 4, b'0');
INSERT INTO `blog` VALUES (8, 'Vue学习', 'http://images.kudaompq.top/20211014144121.png', '\n# VUE简介\n\nVue (读音 /vjuː/，类似于 **view**) 是一套用于构建用户界面的**渐进式框架**。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与[现代化的工具链](https://cn.vuejs.org/v2/guide/single-file-components.html)以及各种[支持类库](https://github.com/vuejs/awesome-vue#libraries--plugins)结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n> 特点\n\n1. 采用组件化模式，提高代码复用率，代码更好维护\n2. 声明式编程，编码人员直接操作DOM，提高开发效率\n\n# Vue核心\n\n\n\n## el和data\n\n**el的两种写法**\n\n```javascript\nVue.config.productionTip = false;\nconst v = new Vue({\n    // el: \'#root\' , // 方法一\n    data: {\n        name: \'kudaompq\',\n\n    }\n})\nconsole.log(v);\nv.$mount(\'#root\') // 方法二\n```\n\n**data的两种写法**\n\n```javascript\nconst v = new Vue({\n    el: \'#root\' ,\n    // data:{\n    // 	name: \"kudaompq\"  // 声明式\n    // }\n    data: function(){\n        return {\n            name: \"kudaompq\"  //函数式\n        }\n    }\n})\n```\n\n由vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了\n\n## MVVM模型\n\n1. M：模型（Model）：对应data中的数据\n2. V：视图（View) ：模板\n3. VM：视图模板（ViewModel）：Vue实例对象\n\n![image-20211022140014347](http://images.kudaompq.top/20211022140014.png)\n\n特点：\n\n1. data中所有的属性，最后都出现在vm身上\n2. vm身上所有的属性 以及Vue原型上所有属性，在Vue模板中都可以直接使用\n\n## Object.DefineProperty方法\n\n**相当于vue中data的底层原理**\n\n```javascript\n    <script>\n        let number = 18;\n        let person = {\n            name: \'张三\',\n            sex: \'男\'\n        }\n        Object.defineProperty(person,\"age\",{\n            // value: 18  ,\n            // enumerable: true, // 控制属性是否可以枚举，默认值是false\n            // writable: true, // 控制属性是否可以被重写\n            // configurable: true //控制属性是否可以被删除，默认值是false\n            get(){\n                console.log(\"有人读取age了\")\n                return number;\n            },\n            set(value){\n                console.log(\"有人修改了age值，且值是\",value);\n                number = value;\n            }\n\n        })\n        console.log(person);\n    </script>\n```\n\n## 数据代理\n\n```javascript\n    <!-- 数据代理：通过一个对象代理队另一个对象中属性的操作（读写） -->\n    <script>\n        let obj = {x:100}\n        let obj2 = {y:200}\n\n        Object.defineProperty(obj2,\'x\',{\n            get(){\n                return obj.x\n            },\n            set(value){\n                obj.x = value;\n            }\n        })\n    </script>\n```\n\n## Vue中的数据代理\n\n1. 通过vm对象来代理data对象中的属性的操作\n2. 更加方便的操作data中地数据\n\n> 基本原理\n\n通过Object.defineProperty()把data对象中所有属性添加到vm上，为每个添加到vm的属性，都指定一个getter/setter。在getter/setter内部去操作（读/写）data中对应的属性\n\n![image-20211022202318199](http://images.kudaompq.top/20211022202318.png)\n\n## 事件\n\n事件的基本使用：\n\n1. 使用v-on:xxx 或者 @xxx绑定事件，其中xxx是事件名\n2. 事件的回调需要配置在methods对象中，最终回到vm上\n3. methods中配置的函数不要用箭头函数，否则this不再是vm\n4. methods中配置的函数，都是被Vue管理的函数，this指向的是vm或者组件实例对象\n5. @click=\"demo\" 和 @click=\"demo($event)\"效果一样，但是后者可以传参数\n\n```javascript\n<body>\n    <div id=\"root\">\n        <h2>欢迎来到{{name}}</h2>\n        <button v-on:click = \"showInfo\"> 点我提示信息（不传参数）</button>\n        <!-- 简写方式 -->\n        <button @click = \"showInfo2(66,$event)\"> 点我提示信息(传参数)</button>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \'#root\',\n            data :{\n                name: \'kudaompq\',\n            },\n            methods: {\n                showInfo(event) {\n                    console.log(event.target.innerText);\n                    // console.log(this === vm); // 此处的this是vm\n                },\n                showInfo2(number,event) {\n                    // console.log(this === vm); // 此处的this是vm\n                    // alert(\'同学你好！！\');\n                    console.log(number);\n                    console.log(event);\n                }\n            },\n        })\n    </script>\n</body>\n```\n\n### 事件修饰符\n\n1. prevent：阻止默认事件\n2. stop：阻止事件冒泡\n3. once：事件只触发一次\n4. self：只有event.target是当前操作的元素时才触发事件\n5. capture：只有事件的捕获模式,先捕获再冒泡\n6. passive：*事件的默认行为立即执行，无需等待时间回调执行完毕*\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>事件修饰符</title>\n    <script src=\"../js/vue.js\"></script>\n    <style>\n        *{\n            margin-top: 20px;\n        }\n        .demo1{\n            height: 50px;\n            background-color: lightblue;\n        }\n        .box1{\n            padding: 5px;\n            background-color: coral;\n        }\n        .box2{\n            padding: 5px;\n            background-color: skyblue;\n        }\n        .list{\n            width: 200px;\n            height: 200px;\n            background-color: peru;\n            overflow: auto;\n        }\n        li{\n            height: 100px;\n            \n        }\n    </style>\n</head>\n<body>\n    <div id=\"root\">\n        <h2>欢迎来到{{name}}</h2>\n        <!-- 阻止默认事件 -->\n       <a href=\"http://kudaompq.top\" @click.prevent=\"showInfo\">点我提示信息</a>\n        <!--阻止事件冒泡  -->\n       <div class=\"demo1\" @click=\"showInfo\">\n           <button @click.stop=\"showInfo\">点我提示信息</button>\n       </div>\n       <!-- 事件只触发一次 -->\n       <button @click.once=\"showInfo\">点我提示信息</button>\n       <!-- 只有事件的捕获模式,先捕获再冒泡 -->\n       <div class=\"box1\" @click.capture=\"showMsg(1)\">\n           div1\n           <div class=\"box2\" @click=\"showMsg(2)\">\n                div2\n           </div>\n       </div>\n       <!-- 只有event.target是当前操作的元素时才触发事件 -->\n       <div class=\"demo1\" @click.self=\"showInfo\">\n        <button @click=\"showInfo\">点我提示信息</button>\n    </div>\n       <!-- 事件的默认行为立即执行，无需等待时间回调执行完毕 -->\n        <ul @wheel.passive=\"demo\" class=\"list\">\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n            <li>4</li>\n        </ul>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \'#root\',\n            data :{\n                name: \'kudaompq\',\n            },\n            methods: {\n                showInfo(e){\n                    alert(\"同学你好\");\n                    // console.log(e.target);\n\n                },\n                showMsg(msg){\n                    alert(msg);\n                },\n                demo(){\n                    // console.log(\"@\");\n                    // for (let i = 0; i < 100000; i++) {\n                    //     console.log(\"#\");                    \n                    // }\n                    console.log(\'太累了\');\n                }\n            },\n        })\n    </script>\n</body>\n</html>\n```\n\n### 键盘事件\n\n1. Vue中常用的按键别名：\n       回车 => enter\n       删除 => delete (捕获“删除”和“退格”键)\n       退出 => esc\n       空格 => space\n       换行 => tab (特殊，必须配合keydown去使用)\n       上 => up\n       下 => down\n       左 => left\n       右 => right\n2. Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）\n3. 系统修饰键（用法特殊）：ctrl、alt、shift、meta\n   (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。\n   (2).配合keydown使用：正常触发事件。\n4. 也可以使用keyCode去指定具体的按键（不推荐）\n5. Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名\n\n```javascript\n<body>\n    <div id=\"root\">\n        <h2>欢迎来到{{name}}</h2>\n        <input type=\"text\" placeholder=\"按下回车提示输入\" @keydown.ctrl=\"showInfo\">\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        Vue.config.keyCodes = { // 自定义按键\n            \"huiche\": 13,\n        };\n        const vm = new Vue({\n            el: \'#root\',\n            data :{\n                name: \'kudaompq\',\n            },\n            methods: {\n                showInfo(e){\n                    // console.log(e.keyCode);\n                    // if (e.keyCode !== 13) return;\n                    console.log(e.target.value);\n                }\n               \n            }\n        })\n    </script>\n</body>\n```\n\n## 计算属性与监视\n\n### 计算属性\n\n定义：要用的属性不存在，要通过已有的属性计算得来\n\n原理： 底层借助了Object.defineproperty方法提供的getter和setter\n\nget函数什么时候执行？\n\n1. 初次读取时会执行一次\n2. 当依赖的数据发生改变时会被再次调用\n\n优势：与methods相比，内部有缓存机制（复用），效率更高，调试方便\n\n备注：\n\n1. 计算属性最终会出现在vm上，直接读取使用即可\n2. 如果计算数学要被修改，那必须写set函数去响应修改，且set中要引起计算时以来的数据发生变化\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"root\">\n        姓：<input type=\"text\" v-model=\'firstName\'><br>\n        名: <input type=\"text\" v-model=\"lastName\"><br>\n        <!-- 全名：<span>{{fullName(firstName,lastName)}}</span> -->\n        全名：<span>{{fullName}}</span>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        \n        const vm = new Vue({\n            el: \'#root\',\n            data:{\n                firstName: \'张\',\n                lastName: \'三\'\n            },\n            methods:{\n                // fullName(a,b){\n                //     return a+b;\n                // }\n            },\n            computed:{\n                fullName:{\n                    get(){\n                        console.log(\"调用了get方法\");\n                        // 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值\n                        // get调用时机，1、初次调用fullName时，2、所依赖的数据发生变化时候\n                        return this.firstName + \'-\' + this.lastName\n                    },\n                    // 当fullName被修改时被调用\n                    set(value){\n                        const arr = value.split(\'-\');\n                        this.firstName = arr[0];\n                        this.lastName = arr[1];\n                    }\n                }\n            }\n        })\n\n    </script>\n</body>\n</html>\n```\n\n> 简写版\n\n在只读取不修改的情况下才能简写\n\n```javascript\ncomputed:{\n    fullName(){\n    return this.firstName + \'-\' + this.lastName;\n    }\n}\n```\n\n### 监视\n\n> 当watch中的变量发生变化的时候调用handler方法\n\n```html\n<body>\n    <div id=\"root\">\n        <h2>今天天气很{{info}}</h2>\n        <button @click=\"isHot = !isHot\">切换天气</button>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \'#root\',\n            data:{\n                isHot: true\n            },\n            computed:{\n                info(){\n                    return this.isHot ? \'炎热\' : \'凉爽\';\n                }\n            },\n            methods: {\n                // changeWeather(){\n                //     this.isHot = !this.isHot;\n                // }\n            },\n            watch:{\n                // 方法1\n                // isHot:{\n                //     // 初始化时让handler调用一下\n                //     immediate:true,\n                //     // handler什么时候调用？当isHot发生改变时\n                //     handler(newValue,oldValue){\n                //         console.log(\"isHot\"+newValue+oldValue);\n                //     }\n                // }\n            }\n\n        })\n        \n        // 方法2\n        vm.$watch(\'info\',{\n            immediate:true,\n            // handler什么时候调用？当isHot发生改变时\n            handler(newValue,oldValue){\n                console.log(\"isHot\"+newValue+oldValue);\n            }\n        })\n    </script>\n</body>\n```\n\n> 深度监测\n\n```javascript\nconst vm = new Vue({\n    el: \'#root\',\n    data:{\n        numbers:{\n            a:1,\n            b:1\n        }\n    },\n    computed:{\n        info(){\n            return this.isHot ? \'炎热\' : \'凉爽\';\n        }\n    },\n    watch:{\n        // 只监视a\n        \'numbers.a\':{\n            handler(){\n                console.log(\'a被改变了\');\n            }\n        }\n    }\n\n})\n```\n\n```javascript\nnumbers:{\n    deep:true,\n        handler(){\n        console.log(\'被改变了\');\n    }\n}\n```\n\n深度监测：\n\n1. Vue中的watch默认不监测对象内部值的改变(一层)\n2. 配置deep：true可以检测对象内部值的改变(多层也可以监测的到)\n\n备注：\n\n1）Vue自身可以监测对象内部链的变化，但是Vue提供的watch默认不可以\n\n2）使用watch时根据数据的具体结构，决定是否采用深度监测\n\n> 监视简写形式\n\n当除了handler没有其他属性的时候可以使用简写方法\n\n```javascript\n//正常\n// isHot:{\n//     // 初始化时让handler调用一下\n//     immediate:true,\n//     // handler什么时候调用？当isHot发生改变时\n//     handler(newValue,oldValue){\n//         console.log(\"isHot\"+newValue+oldValue);\n//     }\n// }\nisHot(){\nconsole.log(\'isHot被修改了\');\n}\n```\n\n```javascript\n// 正常形式\n// vm.$watch(\'info\',{\n//     immediate:true,\n//     // handler什么时候调用？当isHot发生改变时\n//     handler(newValue,oldValue){\n//         console.log(\"isHot\"+newValue+oldValue);\n//     }\n// })\n\n//简写\nvm.$watch(\'isHot\',function() {\n    console.log(\'isHot被修改了1\');\n})\n```\n\n### computed和watch之间的区别\n\n1. computed能完成的功能，watch都可以完成\n2. watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作\n\n两个重要原则：\n\n1. 所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象\n2. 所有不被Vue所管理的函数(定时器的回调函数，ajax的回调函数等)，最好写成箭头函数，这样this指向的才是vm或者组件实例对象\n\n## class与style绑定\n\n```html\n<!DOCTYPE html>\n<html>\n	<head>\n		<meta charset=\"UTF-8\" />\n		<title>绑定样式</title>\n		<style>\n			.basic{\n				width: 400px;\n				height: 100px;\n				border: 1px solid black;\n			}\n			\n			.happy{\n				border: 4px solid red;;\n				background-color: rgba(255, 255, 0, 0.644);\n				background: linear-gradient(30deg,yellow,pink,orange,yellow);\n			}\n			.sad{\n				border: 4px dashed rgb(2, 197, 2);\n				background-color: gray;\n			}\n			.normal{\n				background-color: skyblue;\n			}\n\n			.atguigu1{\n				background-color: yellowgreen;\n			}\n			.atguigu2{\n				font-size: 30px;\n				text-shadow:2px 2px 10px red;\n			}\n			.atguigu3{\n				border-radius: 20px;\n			}\n		</style>\n		<script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n	</head>\n	<body>\n		<!-- \n			绑定样式：\n					1. class样式\n								写法:class=\"xxx\" xxx可以是字符串、对象、数组。\n										字符串写法适用于：类名不确定，要动态获取。\n										对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。\n										数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。\n					2. style样式\n								:style=\"{fontSize: xxx}\"其中xxx是动态值。\n								:style=\"[a,b]\"其中a、b是样式对象。\n		-->\n		<!-- 准备好一个容器-->\n		<div id=\"root\">\n			<!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 -->\n			<div class=\"basic\" :class=\"mood\" @click=\"changeMood\">{{name}}</div> <br/><br/>\n\n			<!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 -->\n			<div class=\"basic\" :class=\"classArr\">{{name}}</div> <br/><br/>\n\n			<!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 -->\n			<div class=\"basic\" :class=\"classObj\">{{name}}</div> <br/><br/>\n\n			<!-- 绑定style样式--对象写法 -->\n			<div class=\"basic\" :style=\"styleObj\">{{name}}</div> <br/><br/>\n			<!-- 绑定style样式--数组写法 -->\n			<div class=\"basic\" :style=\"styleArr\">{{name}}</div>\n		</div>\n	</body>\n\n	<script type=\"text/javascript\">\n		Vue.config.productionTip = false\n		\n		const vm = new Vue({\n			el:\'#root\',\n			data:{\n				name:\'kudaompq\',\n				mood:\'normal\',\n				classArr:[\'atguigu1\',\'atguigu2\',\'atguigu3\'],\n				classObj:{\n					atguigu1:false,\n					atguigu2:false,\n				},\n				styleObj:{\n					fontSize: \'40px\',\n					color:\'red\',\n				},\n				styleObj2:{\n					backgroundColor:\'orange\'\n				},\n				styleArr:[\n					{\n						fontSize: \'40px\',\n						color:\'blue\',\n					},\n					{\n						backgroundColor:\'gray\'\n					}\n				]\n			},\n			methods: {\n				changeMood(){\n					const arr = [\'happy\',\'sad\',\'normal\']\n					const index = Math.floor(Math.random()*3)\n					this.mood = arr[index]\n				}\n			},\n		})\n	</script>\n	\n</html>\n```\n\n## 条件渲染\n\n- v-if和v-show都可以用来进行条件判断，但是v-if会直接删除元素，v-show则是display：none，所以v-if会更消耗资源\n- v-if可以和v-else-if,v-else一块配合使用，**注意**：如果拆开就会报错\n- template只能和v-if配合使用\n\n```html\n<body>\n    <div id=\"root\">\n\n        <!-- v-else 和 v-else-if 中间结构不能被打断 -->\n        <h2>当前的n值是{{n}}</h2>\n        <button @click=\"n++\">点我n+1</button>\n        <div v-if=\"n === 0\">div1</div>\n        <div v-else-if=\"n === 1\">div2</div>\n        <div v-else>div3</div>\n\n        <!-- template只能和v-if一块使用 -->\n        <template v-if=\"n === 1\">\n            <h2>1</h2>\n            <h2>1</h2>\n            <h2>1</h2>\n            <h2>1</h2>\n        </template>\n\n        <!-- 使用v-show进行条件渲染\n        <h2 v-show=\"1 === 1\">{{name}}</h2>\n        使用v-if进行条件渲染 比v-show更消耗性能\n        <h2 v-if=\"1 === 1\">{{name}}</h2> -->\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        \n        new Vue({\n            el: \'#root\',\n            data:{\n                name: \'kudaompq\',\n                a:true,\n                n: 0\n            }\n        })\n    </script>\n</body>\n```\n\n## 渲染列表\n\n**v-for指令**\n\n1. 用于展示列表数据\n2. 语法v-for=\"(item,index) in xxx\" :key=\"yyy\"\n3. 可遍历：数组，对象，字符串，指定次数\n4. 中间可以是in也可以是of\n\n```html\n<body>\n    <div id=\"root\">\n        <h2>人员列表</h2>\n        <!-- 遍历数组 -->\n        <ul>\n            <li v-for=\"(p,index) in persons\" :key=\"index\">\n                {{p.name}}-{{p.age}}-{{index}}\n            </li>\n        </ul>\n        <!-- 遍历对象 -->\n        <ul>\n            <li v-for=\"(value,key) in car\" :key=\"key\">\n                {{value}}--{{key}}\n            </li>\n        </ul>\n        <!-- 遍历字符串 -->\n        <ul>\n            <li v-for=\"(char,index) in str\" :key=\"index\">\n                {{index}}--{{char}}\n            </li>\n        </ul>\n        <!-- 遍历指定次数 -->\n        <ul>\n            <li v-for=\"(number,index) in 5\" :key=\"index\">\n                {{index}}--{{number}}\n            </li>\n        </ul>\n    </div>\n    <script>\n        new Vue({\n            el:\'#root\',\n            data:{\n                persons:[\n                    {id:\'001\',name:\'张三\',age:18},\n                    {id:\'002\',name:\'lisi\',age:18},\n                    {id:\'003\',name:\'wangwu\',age:18},\n                ],\n                car:{\n                    name:\"奥迪A6\",\n                    price:\"700000\",\n                    color:\'黑色\'\n                },\n                str: \'zjstz\'\n            }\n        })\n    </script>\n</body>\n```\n\n### key的作用\n\n```html\n<!-- \n面试题：react、vue中的key有什么作用？（key的内部原理）\n\n1. 虚拟DOM中key的作用：\n	key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, \n	随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：					\n2.对比规则：\n	(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：\n		①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！\n		②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。\n	(2).旧虚拟DOM中未找到与新虚拟DOM相同的key\n		创建新的真实DOM，随后渲染到到页面。			\n3. 用index作为key可能会引发的问题：\n	1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:\n		会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。\n	2. 如果结构中还包含输入类的DOM：\n		会产生错误DOM更新 ==> 界面有问题。\n4. 开发中如何选择key?:\n	1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。\n	2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，\n		使用index作为key是没有问题的。\n-->\n```\n\n### 列表过滤\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>列表过滤</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"root\">\n        <h2>人员列表</h2>\n        <input type=\"text\" v-model=\"keyWord\" placeholder=\"请输入搜索\">\n        <!-- 遍历数组 -->\n        <ul>\n            <li v-for=\"(p,index) in filPersons\" :key=\"p.id\">\n                {{p.name}}-{{p.age}}-{{p.sex}}\n            </li>\n        </ul>\n        \n    </div>\n    <script>\n        // 使用watch实现\n\n        // new Vue({\n        //     el:\'#root\',\n        //     data:{\n        //         keyWord:\'\',\n        //         persons:[\n        //             {id:\'001\',name:\'马冬梅\',age:18,sex:\'女\'},\n        //             {id:\'002\',name:\'周冬雨\',age:19,sex:\'女\'},\n        //             {id:\'003\',name:\'周杰伦\',age:20,sex:\'男\'},\n        //             {id:\'004\',name:\'温兆伦\',age:21,sex:\'女\'},\n        //         ],\n        //         filPersons:[]\n        //     },\n        //     watch:{\n        //         keyWord:{\n        //             immediate:true,\n        //             handler(val){\n        //                 this.filPersons = this.persons.filter((p)=>{\n        //                 return p.name.indexOf(val) != -1;\n        //             })\n        //             }\n        //         }\n        //     }\n        // })\n        // computed实现\n        new Vue({\n            el:\'#root\',\n            data:{\n                keyWord:\'\',\n                persons:[\n                    {id:\'001\',name:\'马冬梅\',age:18,sex:\'女\'},\n                    {id:\'002\',name:\'周冬雨\',age:19,sex:\'女\'},\n                    {id:\'003\',name:\'周杰伦\',age:20,sex:\'男\'},\n                    {id:\'004\',name:\'温兆伦\',age:21,sex:\'女\'},\n                ]\n            },\n            computed:{\n                filPersons(){\n                    return this.persons.filter((p)=>{\n                        return p.name.indexOf(this.keyWord) !== -1;\n                    })\n                }\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n### 列表排序\n\n```html\n<body>\n    <div id=\"root\">\n        <h2>人员列表</h2>\n        <input type=\"text\" v-model=\"keyWord\" placeholder=\"请输入搜索\">\n        <button @click=\"sortType = 2\">年龄升序</button>\n        <button @click=\"sortType = 1\">年龄降序</button>\n        <button @click=\"sortType = 0\">年龄原顺序</button>\n        <!-- 遍历数组 -->\n        <ul>\n            <li v-for=\"(p,index) in filPersons\" :key=\"p.id\">\n                {{p.name}}-{{p.age}}-{{p.sex}}\n            </li>\n        </ul>\n        \n    </div>\n    <script>\n        \n        new Vue({\n            el:\'#root\',\n            data:{\n                sortType:0, // 0代表原顺序，1降序，2升序\n                keyWord:\'\',\n                persons:[\n                    {id:\'001\',name:\'马冬梅\',age:18,sex:\'女\'},\n                    {id:\'002\',name:\'周冬雨\',age:19,sex:\'女\'},\n                    {id:\'003\',name:\'周杰伦\',age:20,sex:\'男\'},\n                    {id:\'004\',name:\'温兆伦\',age:21,sex:\'女\'},\n                ]\n            },\n            computed:{\n                filPersons(){\n                    const arr =  this.persons.filter((p)=>{\n                        return p.name.indexOf(this.keyWord) !== -1;\n                    })\n                    if (this.sortType){\n                        arr.sort((a,b)=>{\n                            return  this.sortType === 1 ? b.age - a.age : a.age - b.age\n                        })\n                    }\n                    return arr;\n                    \n                }\n            }\n        })\n    </script>\n</body>\n```\n\n## 数据监控原理\n\n```javascript\n<script type=\"text/javascript\" >\n\n        let data = {\n            name:\'尚硅谷\',\n            address:\'北京\',\n        }\n\n        //创建一个监视的实例对象，用于监视data中属性的变化\n        const obs = new Observer(data)		\n        console.log(obs)	\n\n        //准备一个vm实例对象\n        let vm = {}\n        vm._data = data = obs\n\n        function Observer(obj){\n            //汇总对象中所有的属性形成一个数组\n            const keys = Object.keys(obj)\n            //遍历\n            keys.forEach((k)=>{\n                Object.defineProperty(this,k,{\n                    get(){\n                        return obj[k]\n                    },\n                    set(val){\n                        console.log(`${k}被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`)\n                        obj[k] = val\n                    }\n                })\n            })\n        }\n </script>\n```\n\n```html\nVue监视数据的原理：\n	1. vue会监视data中所有层次的数据。\n\n	2. 如何监测对象中的数据？\n		通过setter实现监视，且要在new Vue时就传入要监测的数据。\n			(1).对象中后追加的属性，Vue默认不做响应式处理\n			(2).如需给后添加的属性做响应式，请使用如下API：\n					Vue.set(target，propertyName/index，value) 或 \n					vm.$set(target，propertyName/index，value)\n\n	3. 如何监测数组中的数据？\n		通过包裹数组更新元素的方法实现，本质就是做了两件事：\n			(1).调用原生对应的方法对数组进行更新。\n			(2).重新解析模板，进而更新页面。\n\n	4.在Vue修改数组中的某个元素一定要用如下方法：\n		1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()\n		2.Vue.set() 或 vm.$set()\n\n特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！\n```\n\n例子：\n\n```html\n	<body>\n		<!--\n			Vue监视数据的原理：\n				1. vue会监视data中所有层次的数据。\n\n				2. 如何监测对象中的数据？\n								通过setter实现监视，且要在new Vue时就传入要监测的数据。\n									(1).对象中后追加的属性，Vue默认不做响应式处理\n									(2).如需给后添加的属性做响应式，请使用如下API：\n													Vue.set(target，propertyName/index，value) 或 \n													vm.$set(target，propertyName/index，value)\n\n				3. 如何监测数组中的数据？\n									通过包裹数组更新元素的方法实现，本质就是做了两件事：\n										(1).调用原生对应的方法对数组进行更新。\n										(2).重新解析模板，进而更新页面。\n\n				4.在Vue修改数组中的某个元素一定要用如下方法：\n							1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()\n							2.Vue.set() 或 vm.$set()\n				\n				特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！\n		-->\n		<!-- 准备好一个容器-->\n		<div id=\"root\">\n			<h1>学生信息</h1>\n			<button @click=\"student.age++\">年龄+1岁</button> <br/>\n			<button @click=\"addSex\">添加性别属性，默认值：男</button> <br/>\n			<button @click=\"student.sex = \'未知\' \">修改性别</button> <br/>\n			<button @click=\"addFriend\">在列表首位添加一个朋友</button> <br/>\n			<button @click=\"updateFirstFriendName\">修改第一个朋友的名字为：张三</button> <br/>\n			<button @click=\"addHobby\">添加一个爱好</button> <br/>\n			<button @click=\"updateHobby\">修改第一个爱好为：开车</button> <br/>\n			<button @click=\"removeSmoke\">过滤掉爱好中的抽烟</button> <br/>\n			<h3>姓名：{{student.name}}</h3>\n			<h3>年龄：{{student.age}}</h3>\n			<h3 v-if=\"student.sex\">性别：{{student.sex}}</h3>\n			<h3>爱好：</h3>\n			<ul>\n				<li v-for=\"(h,index) in student.hobby\" :key=\"index\">\n					{{h}}\n				</li>\n			</ul>\n			<h3>朋友们：</h3>\n			<ul>\n				<li v-for=\"(f,index) in student.friends\" :key=\"index\">\n					{{f.name}}--{{f.age}}\n				</li>\n			</ul>\n		</div>\n	</body>\n\n	<script type=\"text/javascript\">\n		Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。\n\n		const vm = new Vue({\n			el:\'#root\',\n			data:{\n				student:{\n					name:\'tom\',\n					age:18,\n					hobby:[\'抽烟\',\'喝酒\',\'烫头\'],\n					friends:[\n						{name:\'jerry\',age:35},\n						{name:\'tony\',age:36}\n					]\n				}\n			},\n			methods: {\n				addSex(){\n					// Vue.set(this.student,\'sex\',\'男\')\n					this.$set(this.student,\'sex\',\'男\')\n				},\n				addFriend(){\n					this.student.friends.unshift({name:\'jack\',age:70})\n				},\n				updateFirstFriendName(){\n					this.student.friends[0].name = \'张三\'\n				},\n				addHobby(){\n					this.student.hobby.push(\'学习\')\n				},\n				updateHobby(){\n					// this.student.hobby.splice(0,1,\'开车\')\n					// Vue.set(this.student.hobby,0,\'开车\')\n					this.$set(this.student.hobby,0,\'开车\')\n				},\n				removeSmoke(){\n					this.student.hobby = this.student.hobby.filter((h)=>{\n						return h !== \'抽烟\'\n					})\n				}\n			}\n		})\n	</script>\n```\n\n## 收集表单中的数据\n\n```html\n收集表单数据：\n	若：<input type=\"text\"/>，则v-model收集的是value值，用户输入的就是value值。\n	若：<input type=\"radio\"/>，则v-model收集的是value值，且要给标签配置value值。\n	若：<input type=\"checkbox\"/>\n		1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）\n		2.配置input的value属性:\n			(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）\n			(2)v-model的初始值是数组，那么收集的的就是value组成的数组\n	备注：v-model的三个修饰符：\n		lazy：失去焦点再收集数据\n		number：输入字符串转为有效的数字\n		trim：输入首尾空格过滤\n\n\n<body>\n    <div id=\'root\'>\n        <form @submit.prevent=\"demo\">\n            账号：<input type=\"text\" v-model=\"userInfo.account\"><br>\n            密码：<input type=\"password\" v-model=\"userInfo.password\"><br>\n            年龄：<input type=\"number\" v-model.number=\"userInfo.age\"><br>\n            性别：\n            男<input type=\"radio\" name=\"sex\" value=\"male\" v-model=\"userInfo.sex\">\n            女<input type=\"radio\" name=\"sex\" value=\"female\" v-model=\"userInfo.sex\"><br>\n            爱好：\n            学习<input type=\"checkbox\"  value=\"study\" v-model=\"userInfo.hobby\">\n            打游戏<input type=\"checkbox\"  value=\"game\" v-model=\"userInfo.hobby\">\n            干饭<input type=\"checkbox\"  value=\"eat\" v-model=\"userInfo.hobby\">\n            <br>\n            所属校区\n            <select name=\"\" id=\"\" v-model=\"userInfo.city\">\n                <option value=\"\">请选择校区</option>\n                <option value=\"beijing\">北京</option>\n                <option value=\"shanghai\">上海</option>\n                <option value=\"zhejiang\">浙江</option>\n            </select>\n            <br>\n            其他信息：\n            <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" v-model.lazy=\"userInfo.other\"></textarea><br>\n            <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"userInfo.agree\"> 阅读并接收<a href=\"http://kudaompq.top\">用户协议</a> \n            <button>提交</button>\n        </form>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        const vm = new Vue({\n            el: \'#root\',\n            data:{\n                userInfo:{\n                    account:\'\',\n                    password:\'\',\n                    sex:\'\',\n                    hobby:[],\n                    city:\'\',\n                    other:\'\',\n                    agree:\'\',\n                    age:\'\'\n                }\n                \n\n            },\n            methods: {\n                demo(){\n                    console.log(JSON.stringify(this.userInfo));\n                }\n            },\n        })\n    </script>\n</body>\n```\n\n## 过滤器\n\n1. 过滤器第一个参数是永远不会变的，就是使用过滤器的参数\n2. 可以添加自定义参数\n3. 可以多个过滤器串联使用，只需要用管道符连接即可\n4. 只能在v-band以及插值语法中使用\n5. 复杂的话依旧推荐使用计算属性computed以及方法method\n\n```\n<!-- 过滤器实现 -->\n<h3>现在是：{{time | timeFormater}}</h3>\n<h3>现在是：{{time | timeFormater(\'YYYY_MM_DD\') | mySlice}}</h3>\n<h3 :x=\"msg | mySlice\">尚硅谷</h3>\n        \n<script>\n        Vue.config.productionTip = false;\n        // 配置全局过滤器\n        Vue.filter(\'mySlice\',function(value){\n            return value.slice(0,4);\n        })\n\n        new Vue({\n            el:\'#root\',\n            data:{\n                time: 1621561377603, // 时间戳\n                msg: \'jgnbvvvvvv\'\n            },\n            // 局部过滤器\n            filters:{\n                timeFormater(value,str=\"YYYY-MM-DD HH:mm:ss\"){\n                    return dayjs(value).format(str)\n                }\n            }\n        })\n    </script>\n```\n\n## 内置指令\n\n### V-text\n\n1. 只需要在标签中添加v-text=“你想要的内容”即可\n2. v-text会替换掉节点中所有的内容\n\n### V-html\n\n1. 作用：向指定节点中渲染包含html结构的内容\n2. 与插值语法的区别：\n   - v-html会替换掉节点中所有的内容，{{xx}}则不会\n   - v-html可以识别html结构\n3. 注意：v-html存在安全隐患\n   1. 在网站上动态渲染任何html是非常危险的，容易导致XSS攻击\n   2. 一定要在可信的内容上使用v-html，不要用在用户 提交的内容上\n\n### v-cloak\n\nv-cloak指令（没有值）：\n\n1. 本质是一个特殊属性，Vue实例创建完毕并接管容器后会删除v-cloak属性\n2. 使用css配合v-clock可以解决网速慢时页面展示出{{xxx}}的问题\n\n```html\n<style>\n        [v-cloak]{\n            display: none;\n        }\n</style>\n\n<--如果页面没有加载完v-cloak就会一直存在 -->\n<div id=\"root\" v-cloak>\n        <h1 v-html=\"str\"></h1>\n</div>\n```\n\n### 	V-once\n\n1. v-once所在的节点在初次动态渲染后就视为静态渲染，不会再改变\n2. 以后的数据不会再引起v-once所在结构的更新，可以用于优化性能\n\n```html\n<div id=\"root\" v-cloak>\n        <h1 v-once>初始化n的值是{{n}}</h1>\n        <h1 >n的值是{{n}}</h1>\n        <button @click=\"n++\">n++</button>\n    </div>\n    <script>\n        Vue.config.productionTip = false;\n        new Vue({\n            el:\"#root\",\n            data:{\n                n:1\n            }\n        })\n    </script>\n```\n\n![image-20211030124654447](http://images.kudaompq.top/20211030124654.png)\n\n### v-pre\n\n1. 跳过其所在节点的编译过程\n2. 可利用它跳过，没有使用指令语法，没有使用插值语法的节点，会加快编译\n\n```html\n<div id=\"root\" v-cloak>\n        <h1 v-pre>vue太难了</h1>\n        <h1 v-pre>n的值是{{n}}</h1>\n        <button @click=\"n++\">n++</button>\n    </div>\n```\n\n![image-20211030131342313](http://images.kudaompq.top/20211030131342.png)\n\n## 自定义指令\n\n**定义语法**\n\n1. 局部指令\n\n```javascript\ndirectives:{\n    // 函数式\n    // big函数何时会被调用？ 1. 指令和元素成功绑定时（一上来） 2. 指令所在的模板被重新解析时\n    // 简写方式相当于bind和update两个方式\n    big(element,binding) {\n            element.innerText = binding.value * 10\n    },\n    fbind:{\n        // 指令与元素成功绑定式(一上来)\n        bind(element,binding){\n            element.value = binding.value;\n        },\n        // 指令所在元素被插入页面时\n        inserted(element,binding){\n            element.focus();\n        },\n        // 指令所在的模板被重新解析时\n        update(element,binding){\n            element.value = binding.value;\n            element.focus();\n        }\n    }\n}\n```\n\n2. 全局指令\n\n```javascript\n// 全局的自定义指令\nVue.directive(\'fbind\',{\n    // 指令与元素成功绑定式(一上来)\n    bind(element,binding){\n        element.value = binding.value;\n    },\n    // 指令所在元素被插入页面时\n    inserted(element,binding){\n        element.focus();\n    },\n    // 指令所在的模板被重新解析时\n    update(element,binding){\n        element.value = binding.value;\n        element.focus();\n    }\n})\n```\n\n**配置对象中的三个回调**\n\n(1).bind：指令与元素成功绑定时调用。\n(2).inserted：指令所在元素被插入页面时调用。\n(3).update：指令所在模板结构被重新解析时调用。\n\n**注意点**\n\n1. 指令定义时不加v-，但使用时要加v-\n2. 指令名如果是多个单词要使用xxx-xxx命名方式，不要用驼峰命名camelCase命名\n\n## 生命周期\n\n![生命周期](http://images.kudaompq.top/20211031153625.png)\n\n```javascript\nbeforeCreate(){\n                console.log(\'beforeCreate\')\n            },\n            created(){\n                console.log(\'created\')\n            },\n            beforeMount(){\n                console.log(\'beforeMount\')\n            },\n            mounted(){\n                console.log(\'mounted\')\n            },\n            beforeUpdate(){\n                console.log(\'beforeUpdated\')\n            },\n            updated(){\n                console.log(\'updated\')\n            },\n            beforeDestroy(){\n                console.log(\'beforeDestroy\')\n                this.add()\n            },\n            destroyed(){\n                console.log(\'destroyed\')\n            }\n```\n\n**常见的生命周期钩子：**\n1. mounted:发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】\n2. beforeDestroy：清除定时器、解绑自定义文件、取消订阅消息等【收尾操作】\n\n**关于销毁Vue实例：**\n\n1. 销毁后借助Vue开发工具看不到任何信息\n2. 销毁后自定义事件会失效，但原生DOM事件依然有效\n3. 一般不会在beforeDestroy操作数据，因为即使操作数据，也不会再出发更新流程\n\n\n\n# Vue组件化编程\n\n> 模块\n\n1. 理解：向外提供特定的js程序，一般就是一个js文件\n2. 为什么：js文件很多很复杂\n3. 作用：复用js，简化js编写，提高js运行效率\n\n> 组件\n\n1. 理解：用来实现局部（特定）功能效果的代码集合\n2. 为什么：一个界面的功能很复杂\n3. 作用：复用编码，简化项目编码，提高运行效率\n\n> 模块化\n\n当应用中的js都以模块来编写，那这个应用就是一个模块化的应用\n\n> 组件化\n\n当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用\n\n> 非单文件组件\n\n一个文件中包含有n个组件\n\n> 单文件组件\n\n一个文件只包含1个组件\n\n## 组件的使用\n\n一、定义组件\n\n二、注册组件\n\n三、使用组件\n\n### 定义组件\n\n使用Vue.extend(options)创建，其中options和new Vue(options)时传入的options几乎一样，但也有区别\n区别如下：\n1. 组件不需要写el，因为最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器\n2. data必须写成函数，因为为了避免组件被复用时，数据存在引用关系\n\n备注：使用template可以配置组件结构\n\n### 注册组件\n\n1. 局部注册：靠new Vue的时候传入components选项\n2. 全局注册：靠Vue.component(\'组件名\',组件)\n\n### 使用组件\n\n```javascript\n<script>\n\n    Vue.config.productionTip = false;\n\n    // 创建school组件\n    const school = Vue.extend({\n            template:`\n              <div>\n              <h2>学校名称：{{schoolName}}</h2>\n              <h2>学校地址：{{address}}</h2>\n              <button @click=\"showName\">点我提示学校名</button>\n              </div>\n            `,\n            // el: \'#root\',  // 组件定义时，一定不要写el，因为最终所有的组件都要被一个vm管理，由vm决定服务\n            data(){\n                return {\n                    schoolName:\'synu\',\n                    address:\'沈阳\',\n                }\n            },\n        methods:{\n                showName(){\n                    alert(this.schoolName)\n                }\n        }\n    })\n    // 创建student组件\n    const student = Vue.extend({\n        template:`\n          <div>\n          <h2>学生姓名：{{studentName}}</h2>\n          <h2>学生年龄：{{age}}</h2>\n          </div>\n        `,\n        data(){\n            return{\n                studentName: \'kudaompq\',\n                age: 18\n            }\n        }\n    })\n\n    // 全局注册组件 \n    Vue.component(\'student\',student)\n\n    new Vue({\n        el: \'#root\',\n        // 注册组件（局部注册）\n        components:{\n            school,\n            // student\n        },\n        data:{\n            msg:\'雷猴啊\'\n        }\n\n    })\n</script>\n```\n\n### 注意点\n\n```html\n几个注意点：\n1.关于组件名:\n	一个单词组成：\n		第一种写法(首字母小写)：school\n		第二种写法(首字母大写)：School\n	多个单词组成：\n		第一种写法(kebab-case命名)：my-school\n		第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)\n		备注：\n			(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。\n			(2).可以使用name配置项指定组件在开发者工具中呈现的名字。\n\n2.关于组件标签:	\n	第一种写法：<school></school>\n	第二种写法：<school/>\n	备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。\n\n3.一个简写方式：\n	const school = Vue.extend(options) 可简写为：const school = options\n```\n\n## VueComponent\n\n```html\n<!-- \n关于VueComponent：\n	1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。\n\n	2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，\n		即Vue帮我们执行的：new VueComponent(options)。\n\n	3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！\n\n	4.关于this指向：\n		(1).组件配置中：\n			data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent		实例对象】。\n		(2).new Vue(options)配置中：\n			data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。\n\n	5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。\n		Vue的实例对象，以后简称vm。\n-->\n```\n\n> VueComponent和Vue的内置关系\n\n```javascript\nVueComponent.prototype._proto_ === Vue.prototype\n```\n\n通过该关系可以使用Vue中的一些特定方法\n\n```javascript\n    <script>\n        Vue.config.productionTip = false;\n\n        // 创建school组件\n        const school = Vue.extend({\n            template:`\n              <div>\n              <h2>学校名称：{{schoolName}}</h2>\n              <h2>学校地址：{{address}}</h2>\n\n              </div>\n            `,\n            data(){\n                return {\n                    schoolName:\'synu\',\n                    address:\'沈阳\',\n                }\n            }\n        })\n\n        console.log(school.prototype.__proto__)\n        console.log(school.prototype)  // 这个得出是Vue的对象\n        console.log(Vue.prototype)	\n        new Vue({\n            el: \'#root\',\n            components:{\n                school\n            }\n        })\n    </script>\n\n```\n\n![image-20211101163359992](http://images.kudaompq.top/20211101163400.png)\n\n# Vue脚手架\n\n## 安装Vue-cli\n1. 配置npm淘宝镜像\n\n```bash\nnpm config set regist http://registry.npm.taobao.org/\n```\n\n2. 全局安装@vue/cli。\n\n```bash\nnpm install -g @vue/cli\n```\n3. 切换到你要创建的目录，使用命令创建项目\n\n```bash\nvue create xxx\n```\n4. 启动项目\n\n```bash\nnpm run serve\n```\n\n## 关于不同版本的Vue\n\n1. vue.js与vue.runtime.xxx.js的区别\n   1. vue.js是完整版的Vue，包含：核心功能+模板解析器\n   2. vue.runtime.xxx.js是运行版的Vue，只包含核心功能，没有模板解析器\n2. 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到createElement函数去指定具体内容\n\n## refs属性\n\n1. 被用来给元素或者子组件注册引用信息(id的替代者)\n2. 应用在html标签上获取的是真实Dom元素，应用在组件标签上是组件实例对象\n\n```html\n<template>\n  <div>\n    <h1 v-text=\"msg\" ref=\"title\"></h1>\n    <button ref=\"btn\" @click=\"showDOM\">点我输出上面的DOM元素</button>\n    <School ref=\"sch\"></School>\n  </div>\n</template>\n\n<script>\n  // 引入组件\n  import School from \"./components/School\";\n  export default {\n    name: \'App\',\n    data(){\n      return{\n        msg: \'欢迎学习Vue\'\n      }\n    },\n    components:{\n      School\n    },\n    methods:{\n      showDOM(){\n        console.log(this.$refs.title) // 获取真实DOM元素\n        console.log(this.$refs.btn) // 获取真实DOM元素\n        console.log(this.$refs.sch) // 获取School组件的实例对象\n      }\n    }\n  }\n</script>\n```\n\n![image-20211102132902491](http://images.kudaompq.top/20211102132902.png)\n\n## 配置项props\n\n功能：让组件接收外部传进来的数据\n\n1、传递数据\n\n```html\n<Demo name=\"xxx\" />\n```\n\n2、接收数据\n\n```vue\n	// 简单声明接受\n    props:[\'name\',\'sex\',\'age\']\n\n    // 接受的同时对数据进行类型限制\n/*    props:{\n      name: String,\n      sex: String,\n      age: Number\n    }*/\n    // 接收的同时对数据进行类型限制，默认值的指定+必要性的限制\n   /* props:{\n      name:{\n        type: String, // name的类型\n        required: true // name是必要的\n      },\n      age:{\n        type: Number,\n        default: 99 //默认值\n      },\n      sex:{\n        type: String,\n        required: true\n      }\n    }*/\n```\n\n注意：props是只读的，Vue底层会监控你对props的修改，如果进行了修改就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，对data中的数据进行修改\n\n## mixin（混入）\n\n功能：可以把多个组件公用的配置提取成一个混入对象\n\n使用方法：\n\n第一步定义混合\n\n```js\nexport const mixin = {\n    methods:{\n        showName(){\n            alert(this.name)\n        }\n    },\n    mounted() {\n        console.log(\'mounted!!!!\')\n    }\n}\n```\n\n第二步使用混合\n\n（1）全局混入：Vue.mixin(xxx)：需要在main.js中配置\n\n```js\nimport {mixin} from \"@/mixin\";\nVue.mixin(mixin)\n```\n\n（2）局部混入：mixins:[\'xxx\']\n\n```js\nimport {mixin} from \"@/mixin\";\n  export default {\n    name:\'School\',\n    data(){\n      return {\n        name:\'synu\',\n        address:\'sy\'\n      }\n    },\n    mixins:[mixin]\n  }\n```\n\n## 插件\n\n功能：用于增强Vue\n\n本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据\n\n定义插件：\n\n```js\n对象.install = function(Vue,options){\n	// 1.添加过滤器\n	Vue.filter(...)\n	// 2.添加全局指令\n	Vue.directive(....)\n	// 3.配置全局混入（合）\n	Vue.mixin(....)\n	// 4.添加实例方法\n	Vue.prototype.$myMethod = function(){...}\n}\n```\n\n使用插件：Vue.use()\n\n## scope样式\n\n作用：让样式在局部生效，防止冲突\n\n```vue\n<style scoped>\n\n</style>\n```\n\n## Todo-list案例\n\n1. 组件化编码流程：\n\n   ​	(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。\n\n   ​	(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：\n\n   ​			1).一个组件在用：放在组件自身即可。\n\n   ​			2). 一些组件在用：放在他们共同的父组件上（<span style=\"color:red\">状态提升</span>）。\n\n   ​	(3).实现交互：从绑定事件开始。\n\n2. props适用于：\n\n   ​	(1).父组件 ==> 子组件 通信\n\n   ​	(2).子组件 ==> 父组件 通信（要求父先给子一个函数）\n\n3. 使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！\n\n4. props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。\n\n##  webStorage\n\n1. 存储内容大小一般支持5MB左右（不同浏览器可能还不一样）\n\n2. 浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。\n\n3. 相关API：\n\n   1. ```xxxxxStorage.setItem(\'key\', \'value\');```\n      	该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n\n   2. ```xxxxxStorage.getItem(\'person\');```\n\n      ​		该方法接受一个键名作为参数，返回键名对应的值。\n\n   3. ```xxxxxStorage.removeItem(\'key\');```\n\n      ​		该方法接受一个键名作为参数，并把该键名从存储中删除。\n\n   4. ``` xxxxxStorage.clear()```\n\n      ​		该方法会清空存储中的所有数据。\n\n4. 备注：\n\n   1. SessionStorage存储的内容会随着浏览器窗口关闭而消失。\n   2. LocalStorage存储的内容，需要手动清除才会消失。\n   3. ```xxxxxStorage.getItem(xxx)```如果xxx对应的value获取不到，那么getItem的返回值是null。\n   4. ```JSON.parse(null)```的结果依然是null。\n\n## 组件的自定义事件\n\n1. 一种组件间通信的方式，适用于：<strong style=\"color:red\">子组件 ===> 父组件</strong>\n\n2. 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style=\"color:red\">事件的回调在A中</span>）。\n\n3. 绑定自定义事件：\n\n   1. 第一种方式，在父组件中：```<Demo @ceit=\"test\"/>```  或 ```<Demo v-ceit=\"test\"/>```\n\n   2. 第二种方式，在父组件中：\n\n      ```js\n      <Demo ref=\"demo\"/>\n      ......\n      mounted(){\n         this.$refs.xxx.$on(\'c\',this.test)\n      }\n      ```\n\n   3. 若想让自定义事件只能触发一次，可以使用```once```修饰符，或```$once```方法。\n\n4. 触发自定义事件：```this.$emit(\'ceit\',数据)```		\n\n5. 解绑自定义事件```this.$off(\'ceit\')```\n\n   1. 解绑多个```this.$off([\'ceit\',\'demo\'])```\n   2. 解绑所有```this.$off()```\n\n6. 组件上也可以绑定原生DOM事件，需要使用```native```修饰符。\n\n7. 注意：通过```this.$refs.xxx.$on(\'ceit\',回调)```绑定自定义事件时，回调<span style=\"color:red\">要么配置在methods中</span>，<span style=\"color:red\">要么用箭头函数</span>，否则this指向会出问题！\n\n## 全局事件总线（GlobalEventBus）\n\n1. 一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。\n\n2. 安装全局事件总线：\n\n   ```js\n   new Vue({\n   	......\n   	beforeCreate() {\n   		Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm\n   	},\n       ......\n   }) \n   ```\n\n3. 使用事件总线：\n\n   1. 接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style=\"color:red\">回调留在A组件自身。</span>\n\n      ```js\n      methods(){\n        demo(data){......}\n      }\n      ......\n      mounted() {\n        this.$bus.$on(\'xxxx\',this.demo)\n      }\n      ```\n\n   2. 提供数据：```this.$bus.$emit(\'xxxx\',数据)```\n\n4. 最好在beforeDestroy钩子中，用$off去解绑<span style=\"color:red\">当前组件所用到的</span>事件。\n\n## 消息订阅与发布（pubsub）\n\n1. 一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。\n\n2. 使用步骤：\n\n   1. 安装pubsub：```npm i pubsub-js```\n\n   2. 引入: ```import pubsub from \'pubsub-js\'```\n\n   3. 接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style=\"color:red\">回调留在A组件自身。</span>\n\n      ```js\n      methods(){\n        demo(_,data){......} // 会返回一个消息名称还有一个数据\n      }\n      ......\n      mounted() {\n        this.pid = pubsub.subscribe(\'xxx\',this.demo) //订阅消息\n      }\n      ```\n\n   4. 提供数据：```pubsub.publish(\'xxx\',数据)```\n\n   5. 最好在beforeDestroy钩子中，用```PubSub.unsubscribe(pid)```去<span style=\"color:red\">取消订阅。</span>\n\n## nextTick\n\n1. 语法：```this.$nextTick(回调函数)```\n2. 作用：在下一次 DOM 更新结束后执行其指定的回调。\n3. 什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。\n\n## Vue封装的过度与动画\n\n1. 作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。\n\n2. 图示：![image-20211105134854512](http://images.kudaompq.top/20211105134854.png)\n\n3. 写法：\n\n   1. 准备好样式：\n\n      - 元素进入的样式：\n        1. v-enter：进入的起点\n        2. v-enter-active：进入过程中\n        3. v-enter-to：进入的终点\n      - 元素离开的样式：\n        1. v-leave：离开的起点\n        2. v-leave-active：离开过程中\n        3. v-leave-to：离开的终点\n\n   2. 使用```<transition>```包裹要过度的元素，并配置name属性：\n\n      ```vue\n      <transition name=\"hello\">\n      	<h1 v-show=\"isShow\">你好啊！</h1>\n      </transition>\n      ```\n\n   3. 备注：若有多个元素需要过度，则需要使用：```<transition-group>```，且每个元素都要指定```key```值。\n\n4. 使用第三方插件\n\n```vue\n<template>\n<div>\n  <button @click=\"isShow = !isShow\">\n    显示/隐藏\n  </button>\n  <transition-group\n      appear\n      name=\"animate__animated animate__bounce\"\n      enter-active-class=\"animate__swing\"\n      leave-active-class=\"animate__backOutUp\"\n  >\n    <h1 v-show=\"isShow\" :key=\"1\" >你好</h1>\n    <h1 v-show=\"isShow\" :key=\"2\">你好</h1>\n  </transition-group>\n</div>\n</template>\n\n<script>\nimport \'animate.css\'\nexport default {\n  name: \"Test\",\n  data(){\n    return {\n      isShow:true\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1{\n  background-color: orange;\n}\n</style>\n```\n\n## vue脚手架配置代理\n\n### 方法一\n\n​	在vue.config.js中添加如下配置：\n\n```js\ndevServer:{\n  proxy:\"http://localhost:5000\"\n}\n```\n\n说明：\n\n1. 优点：配置简单，请求资源时直接发给前端（8080）即可。\n2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理。\n3. 工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）\n\n### 方法二\n\n​	编写vue.config.js配置具体代理规则：\n\n```js\nmodule.exports = {\n	devServer: {\n      proxy: {\n      \'/api1\': {// 匹配所有以 \'/api1\'开头的请求路径\n        target: \'http://localhost:5000\',// 代理目标的基础路径\n        changeOrigin: true,\n        pathRewrite: {\'^/api1\': \'\'}\n      },\n      \'/api2\': {// 匹配所有以 \'/api2\'开头的请求路径\n        target: \'http://localhost:5001\',// 代理目标的基础路径\n        changeOrigin: true,\n        pathRewrite: {\'^/api2\': \'\'}\n      }\n    }\n  }\n}\n/*\n   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000\n   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080\n   changeOrigin默认值为true\n*/\n```\n\n说明：\n\n1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\n2. 缺点：配置略微繁琐，请求资源时必须加前缀。\n\n## 插槽\n\n1. 作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===> 子组件</strong> 。\n\n2. 分类：默认插槽、具名插槽、作用域插槽\n\n3. 使用方式：\n\n   1. 默认插槽：\n\n      ```vue\n      父组件中：\n              <Category>\n                 <div>html结构1</div>\n              </Category>\n      子组件中：\n              <template>\n                  <div>\n                     <!-- 定义插槽 -->\n                     <slot>插槽默认内容...</slot>\n                  </div>\n              </template>\n      ```\n\n   2. 具名插槽：\n\n      ```vue\n      父组件中：\n              <Category>\n                  <template slot=\"center\">\n                    <div>html结构1</div>\n                  </template>\n      \n                  <template v-slot:footer>\n                     <div>html结构2</div>\n                  </template>\n              </Category>\n      子组件中：\n              <template>\n                  <div>\n                     <!-- 定义插槽 -->\n                     <slot name=\"center\">插槽默认内容...</slot>\n                     <slot name=\"footer\">插槽默认内容...</slot>\n                  </div>\n              </template>\n      ```\n\n   3. 作用域插槽：\n\n      1. 理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）\n\n      2. 具体编码：\n\n         ```vue\n         父组件中：\n         		<Category>\n         			<template scope=\"scopeData\">\n         				<!-- 生成的是ul列表 -->\n         				<ul>\n         					<li v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</li>\n         				</ul>\n         			</template>\n         		</Category>\n         \n         		<Category>\n         			<template slot-scope=\"scopeData\">\n         				<!-- 生成的是h4标题 -->\n         				<h4 v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</h4>\n         			</template>\n         		</Category>\n         子组件中：\n                 <template>\n                     <div>\n                         <slot :games=\"games\"></slot>\n                     </div>\n                 </template>\n         		\n                 <script>\n                     export default {\n                         name:\'Category\',\n                         props:[\'title\'],\n                         //数据在子组件自身\n                         data() {\n                             return {\n                                 games:[\'红色警戒\',\'穿越火线\',\'劲舞团\',\'超级玛丽\']\n                             }\n                         },\n                     }\n                 </script>\n         ```\n\n   \n\n## Vuex\n\n![vuex](http://images.kudaompq.top/20211119102959.png)\n\n### 1.概念\n\n​		在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\n\n### 2.何时使用？\n\n​		多个组件需要共享数据时\n\n### 3.搭建vuex环境\n\n1. 创建文件：```src/store/index.js```\n\n   ```js\n   //引入Vue核心库\n   import Vue from \'vue\'\n   //引入Vuex\n   import Vuex from \'vuex\'\n   //应用Vuex插件\n   Vue.use(Vuex)\n   \n   //准备actions对象——响应组件中用户的动作\n   const actions = {}\n   //准备mutations对象——修改state中的数据\n   const mutations = {}\n   //准备state对象——保存具体的数据\n   const state = {}\n   \n   //创建并暴露store\n   export default new Vuex.Store({\n   	actions,\n   	mutations,\n   	state\n   })\n   ```\n\n2. 在```main.js```中创建vm时传入```store```配置项\n\n   ```js\n   ......\n   //引入store\n   import store from \'./store\'\n   ......\n   \n   //创建vm\n   new Vue({\n   	el:\'#app\',\n   	render: h => h(App),\n   	store\n   })\n   ```\n\n###    4.基本使用\n\n1. 初始化数据、配置```actions```、配置```mutations```，操作文件```store.js```\n\n   ```js\n   //引入Vue核心库\n   import Vue from \'vue\'\n   //引入Vuex\n   import Vuex from \'vuex\'\n   //引用Vuex\n   Vue.use(Vuex)\n   \n   const actions = {\n       //响应组件中加的动作\n   	jia(context,value){\n   		// console.log(\'actions中的jia被调用了\',miniStore,value)\n   		context.commit(\'JIA\',value)\n   	},\n   }\n   \n   const mutations = {\n       //执行加\n   	JIA(state,value){\n   		// console.log(\'mutations中的JIA被调用了\',state,value)\n   		state.sum += value\n   	}\n   }\n   \n   //初始化数据\n   const state = {\n      sum:0\n   }\n   \n   //创建并暴露store\n   export default new Vuex.Store({\n   	actions,\n   	mutations,\n   	state,\n   })\n   ```\n\n2. 组件中读取vuex中的数据：```$store.state.sum```\n\n3. 组件中修改vuex中的数据：```$store.dispatch(\'action中的方法名\',数据)``` 或 ```$store.commit(\'mutations中的方法名\',数据)```\n\n   >  备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写```dispatch```，直接编写```commit```\n\n### 5.getters的使用\n\n1. 概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。\n\n2. 在```store.js```中追加```getters```配置\n\n   ```js\n   ......\n   \n   const getters = {\n   	bigSum(state){\n   		return state.sum * 10\n   	}\n   }\n   \n   //创建并暴露store\n   export default new Vuex.Store({\n   	......\n   	getters\n   })\n   ```\n\n3. 组件中读取数据：```$store.getters.bigSum```\n\n### 6.四个map方法的使用\n\n1. <strong>mapState方法：</strong>用于帮助我们映射```state```中的数据为计算属性\n\n   ```js\n   computed: {\n       //借助mapState生成计算属性：sum、school、subject（对象写法）\n        ...mapState({sum:\'sum\',school:\'school\',subject:\'subject\'}),\n            \n       //借助mapState生成计算属性：sum、school、subject（数组写法）\n       ...mapState([\'sum\',\'school\',\'subject\']),\n   },\n   ```\n\n2. <strong>mapGetters方法：</strong>用于帮助我们映射```getters```中的数据为计算属性\n\n   ```js\n   computed: {\n       //借助mapGetters生成计算属性：bigSum（对象写法）\n       ...mapGetters({bigSum:\'bigSum\'}),\n   \n       //借助mapGetters生成计算属性：bigSum（数组写法）\n       ...mapGetters([\'bigSum\'])\n   },\n   ```\n\n3. <strong>mapActions方法：</strong>用于帮助我们生成与```actions```对话的方法，即：包含```$store.dispatch(xxx)```的函数\n\n   ```js\n   <button @click=\"incrementOdd(n)\">当前为奇数在再加</button>\n   <button @click=\"incrementWait(n)\">等会再加</button>\n   \n   methods:{\n       //靠mapActions生成：incrementOdd、incrementWait（对象形式）\n       ...mapActions({incrementOdd:\'jiaOdd\',incrementWait:\'jiaWait\'})\n   \n       //靠mapActions生成：incrementOdd、incrementWait（数组形式）\n       ...mapActions([\'jiaOdd\',\'jiaWait\'])\n   }\n   ```\n\n4. <strong>mapMutations方法：</strong>用于帮助我们生成与```mutations```对话的方法，即：包含```$store.commit(xxx)```的函数\n\n   ```js\n   // 使用方法一\n   <button @click=\"increment(n)\">+</button>\n   <button @click=\"decrement(n)\">-</button>\n   \n   \n   methods:{\n       //靠mapActions生成：increment、decrement（对象形式）\n       ...mapMutations({increment:\'JIA\',decrement:\'JIAN\'}),\n       \n       //靠mapMutations生成：JIA、JIAN（对象形式）\n       ...mapMutations([\'JIA\',\'JIAN\']),\n   }\n   ```\n\n> 备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\n\n### 7.模块化+命名空间\n\n1. 目的：让代码更好维护，让多种数据分类更加明确。\n\n2. 修改```store.js```\n\n   ```javascript\n   const countAbout = {\n     namespaced:true,//开启命名空间\n     state:{x:1},\n     mutations: { ... },\n     actions: { ... },\n     getters: {\n       bigSum(state){\n          return state.sum * 10\n       }\n     }\n   }\n   \n   const personAbout = {\n     namespaced:true,//开启命名空间\n     state:{ ... },\n     mutations: { ... },\n     actions: { ... }\n   }\n   \n   const store = new Vuex.Store({\n     modules: {\n       countAbout,\n       personAbout\n     }\n   })\n   ```\n\n3. 开启命名空间后，组件中读取state数据：\n\n   ```js\n   //方式一：自己直接读取\n   this.$store.state.personAbout.list\n   //方式二：借助mapState读取：\n   ...mapState(\'countAbout\',[\'sum\',\'school\',\'subject\']),\n   ```\n\n4. 开启命名空间后，组件中读取getters数据：\n\n   ```js\n   //方式一：自己直接读取\n   this.$store.getters[\'personAbout/firstPersonName\']\n   //方式二：借助mapGetters读取：\n   ...mapGetters(\'countAbout\',[\'bigSum\'])\n   ```\n\n5. 开启命名空间后，组件中调用dispatch\n\n   ```js\n   //方式一：自己直接dispatch\n   this.$store.dispatch(\'personAbout/addPersonWang\',person)\n   //方式二：借助mapActions：\n   ...mapActions(\'countAbout\',{incrementOdd:\'jiaOdd\',incrementWait:\'jiaWait\'})\n   ```\n\n6. 开启命名空间后，组件中调用commit\n\n   ```js\n   //方式一：自己直接commit\n   this.$store.commit(\'personAbout/ADD_PERSON\',person)\n   //方式二：借助mapMutations：\n   ...mapMutations(\'countAbout\',{increment:\'JIA\',decrement:\'JIAN\'}),\n   ```\n\n ## 路由\n\n1. 理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。\n2. 前端路由：key是路径，value是组件。\n\n### 1.基本使用\n\n1. 安装vue-router，命令：```npm i vue-router```\n\n2. 应用插件：```Vue.use(VueRouter)```\n\n3. 编写router配置项:\n\n   ```js\n   //引入VueRouter\n   import VueRouter from \'vue-router\'\n   //引入Luyou 组件\n   import About from \'../components/About\'\n   import Home from \'../components/Home\'\n   \n   //创建router实例对象，去管理一组一组的路由规则\n   const router = new VueRouter({\n   	routes:[\n   		{\n   			path:\'/about\',\n   			component:About\n   		},\n   		{\n   			path:\'/home\',\n   			component:Home\n   		}\n   	]\n   })\n   \n   //暴露router\n   export default router\n   ```\n\n4. 实现切换（active-class可配置高亮样式）\n\n   ```vue\n   <router-link active-class=\"active\" to=\"/about\">About</router-link>\n   ```\n\n5. 指定展示位置\n\n   ```vue\n   <router-view></router-view>\n   ```\n\n### 2.几个注意点\n\n1. 路由组件通常存放在```pages```文件夹，一般组件通常存放在```components```文件夹。\n2. 通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\n3. 每个组件都有自己的```$route```属性，里面存储着自己的路由信息。\n4. 整个应用只有一个router，可以通过组件的```$router```属性获取到。\n\n### 3.多级路由（多级路由）\n\n1. 配置路由规则，使用children配置项：\n\n   ```js\n   routes:[\n   	{\n   		path:\'/about\',\n   		component:About,\n   	},\n   	{\n   		path:\'/home\',\n   		component:Home,\n   		children:[ //通过children配置子级路由\n   			{\n   				path:\'news\', //此处一定不要写：/news\n   				component:News\n   			},\n   			{\n   				path:\'message\',//此处一定不要写：/message\n   				component:Message\n   			}\n   		]\n   	}\n   ]\n   ```\n\n2. 跳转（要写完整路径）：\n\n   ```vue\n   <router-link to=\"/home/news\">News</router-link>\n   ```\n\n### 4.路由的query参数\n\n1. 传递参数\n\n   ```vue\n   <!-- 跳转并携带query参数，to的字符串写法 -->\n   <router-link :to=\"/home/message/detail?id=666&title=你好\">跳转</router-link>\n   				\n   <!-- 跳转并携带query参数，to的对象写法 -->\n   <router-link \n   	:to=\"{\n   		path:\'/home/message/detail\',\n   		query:{\n   		   id:666,\n               title:\'你好\'\n   		}\n   	}\"\n   >跳转</router-link>\n   ```\n\n2. 接收参数：\n\n   ```js\n   $route.query.id\n   $route.query.title\n   ```\n\n### 5.命名路由\n\n1. 作用：可以简化路由的跳转。\n\n2. 如何使用\n\n   1. 给路由命名：\n\n      ```js\n      {\n      	path:\'/demo\',\n      	component:Demo,\n      	children:[\n      		{\n      			path:\'test\',\n      			component:Test,\n      			children:[\n      				{\n                            name:\'hello\' //给路由命名\n      					path:\'welcome\',\n      					component:Hello,\n      				}\n      			]\n      		}\n      	]\n      }\n      ```\n\n   2. 简化跳转：\n\n      ```vue\n      <!--简化前，需要写完整的路径 -->\n      <router-link to=\"/demo/test/welcome\">跳转</router-link>\n      \n      <!--简化后，直接通过名字跳转 -->\n      <router-link :to=\"{name:\'hello\'}\">跳转</router-link>\n      \n      <!--简化写法配合传递参数 -->\n      <router-link \n      	:to=\"{\n      		name:\'hello\',\n      		query:{\n      		   id:666,\n                  title:\'你好\'\n      		}\n      	}\"\n      >跳转</router-link>\n      ```\n\n### 6.路由的params参数\n\n1. 配置路由，声明接收params参数\n\n   ```js\n   {\n   	path:\'/home\',\n   	component:Home,\n   	children:[\n   		{\n   			path:\'news\',\n   			component:News\n   		},\n   		{\n   			component:Message,\n   			children:[\n   				{\n   					name:\'xiangqing\',\n   					path:\'detail/:id/:title\', //使用占位符声明接收params参数\n   					component:Detail\n   				}\n   			]\n   		}\n   	]\n   }\n   ```\n\n2. 传递参数\n\n   ```vue\n   <!-- 跳转并携带params参数，to的字符串写法 -->\n   <router-link :to=\"/home/message/detail/666/你好\">跳转</router-link>\n   				\n   <!-- 跳转并携带params参数，to的对象写法 -->\n   <router-link \n   	:to=\"{\n   		name:\'xiangqing\',\n   		params:{\n   		   id:666,\n               title:\'你好\'\n   		}\n   	}\"\n   >跳转</router-link>\n   ```\n\n   > 特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！\n\n3. 接收参数：\n\n   ```js\n   $route.params.id\n   $route.params.title\n   ```\n\n### 7.路由的props配置\n\n​	作用：让路由组件更方便的收到参数\n\n```js\n{\n	name:\'xiangqing\',\n	path:\'detail/:id\',\n	component:Detail,\n\n	//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件\n	// props:{a:900}\n\n	//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件\n	// props:true\n	\n	//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件\n	props(route){\n		return {\n			id:route.query.id,\n			title:route.query.title\n		}\n	}\n}\n```\n\n接收参数需要在组件中使用props接收\n\n### 8.router-link的replace属性\n\n1. 作用：控制路由跳转时操作浏览器历史记录的模式\n2. 浏览器的历史记录有两种写入方式：分别为```push```和```replace```，```push```是追加历史记录，```replace```是替换当前记录。路由跳转时候默认为```push```\n3. 如何开启```replace```模式：```<router-link replace .......>News</router-link>```\n\n### 9.编程式路由导航\n\n1. 作用：不借助```<router-link> ```实现路由跳转，让路由跳转更加灵活\n\n2. 具体编码：\n\n   ```js\n   //$router的两个API\n   this.$router.push({\n   	name:\'xiangqing\',\n   		params:{\n   			id:xxx,\n   			title:xxx\n   		}\n   })\n   \n   this.$router.replace({\n   	name:\'xiangqing\',\n   		params:{\n   			id:xxx,\n   			title:xxx\n   		}\n   })\n   this.$router.forward() //前进\n   this.$router.back() //后退\n   this.$router.go() //可前进也可后退\n   ```\n\n### 10.缓存路由组件\n\n1. 作用：让不展示的路由组件保持挂载，不被销毁。\n\n2. 具体编码：\n\n   ```vue\n   <keep-alive include=\"News\"> \n       <router-view></router-view>\n   </keep-alive>\n   ```\n\n### 11.两个新的生命周期钩子\n\n1. 作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。\n2. 具体名字：\n   1. ```activated```路由组件被激活时触发。\n   2. ```deactivated```路由组件失活时触发。\n\n### 12.路由守卫\n\n1. 作用：对路由进行权限控制\n\n2. 分类：全局守卫、独享守卫、组件内守卫\n\n3. 全局守卫:\n\n   ```js\n   //全局前置守卫：初始化时执行、每次路由切换前执行\n   router.beforeEach((to,from,next)=>{\n   	console.log(\'beforeEach\',to,from)\n   	if(to.meta.isAuth){ //判断当前路由是否需要进行权限控制\n   		if(localStorage.getItem(\'school\') === \'atguigu\'){ //权限控制的具体规则\n   			next() //放行\n   		}else{\n   			alert(\'暂无权限查看\')\n   			// next({name:\'guanyu\'})\n   		}\n   	}else{\n   		next() //放行\n   	}\n   })\n   \n   //全局后置守卫：初始化时执行、每次路由切换后执行\n   router.afterEach((to,from)=>{\n   	console.log(\'afterEach\',to,from)\n   	if(to.meta.title){ \n   		document.title = to.meta.title //修改网页的title\n   	}else{\n   		document.title = \'vue_test\'\n   	}\n   })\n   ```\n\n4. 独享守卫:\n\n   ```js\n   beforeEnter(to,from,next){\n   	console.log(\'beforeEnter\',to,from)\n   	if(to.meta.isAuth){ //判断当前路由是否需要进行权限控制\n   		if(localStorage.getItem(\'school\') === \'atguigu\'){\n   			next()\n   		}else{\n   			alert(\'暂无权限查看\')\n   			// next({name:\'guanyu\'})\n   		}\n   	}else{\n   		next()\n   	}\n   }\n   ```\n\n5. 组件内守卫：\n\n   ```js\n   //进入守卫：通过路由规则，进入该组件时被调用\n   beforeRouteEnter (to, from, next) {\n   },\n   //离开守卫：通过路由规则，离开该组件时被调用\n   beforeRouteLeave (to, from, next) {\n   }\n   ```\n\n### 13.路由器的两种工作模式\n\n\n\n1. 对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。\n2. hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。\n3. hash模式：\n   1. 地址中永远带着#号，不美观 。\n   2. 若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。\n   3. 兼容性较好。\n4. history模式：\n   1. 地址干净，美观 。\n   2. 兼容性和hash模式相比略差。\n   3. 应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。\n', '', b'1', b'1', b'1', b'1', '2022-02-15 12:44:49', '2022-02-15 12:44:49', 0, 1, b'0');
INSERT INTO `blog` VALUES (9, 'Kudaompq的算法模板', 'http://images.kudaompq.top/20211231105616.png', '## 基础算法\n\n### 输入模板\n\nJava输入最好使用BufferedReader来进行输入，效率会比Scanner提高将近十倍\n\n```java\nBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\nint n = Integer.parseInt(reader.readLine());  // 获取单个数据\nString[] temp = reader.readLine().split(\" \"); // 获取数据数据\n```\n\n### 快排模板\n\n```java\npublic static void quick_sort(int[] q,int l,int r){\n    if (l >= r) return;\n    // 确定分界点x，初始化i,j下标\n    int x = q[l] , i = l - 1 , j = r + 1;\n    while(i < j){\n        // 每次循环前先++，这就是上面i = l - 1 的原因\n        do i ++; while (q[i] < x);\n        do j --; while (q[j] > x);\n        if (i < j) {int tmp = q[i] ; q[i] = q[j] ; q[j] = tmp ;}\n    }\n    // 左区间递归继续排序\n    quick_sort(q,l,j);\n    // 右区间递归继续排序\n    quick_sort(q,j + 1 ,r);\n}\n```\n\n### 归并模板\n\n```java\npublic static void merge_sort(int[] q,int l,int r){\n\n    if (l >= r) return;\n    int mid = l + r >> 1; // 相当于 (l + r) / 2\n    // 先拆分\n    merge_sort(q , l , mid);\n    merge_sort(q ,mid + 1 , r);\n\n    // 再合并\n    // 确定起点终点\n    int k = 0, i = l ,j = mid + 1;\n    // 当在边界内时，比较大小进行排序\n    while(i <= mid && j <= r){\n        if (q[i] < q[j]) tmp[k ++] = q[i ++];\n        else tmp[k ++] = q[j ++];\n    }\n    // 当两个分段中有一个没有分配完，就接着分配\n    while(i <= mid) tmp[k++] = q[i++];\n    while (j <= r) tmp[k++] = q[j++];\n\n    // 将临时数组的值传给原数组q\n    for (i = l , j = 0 ; i <= r ; i++ , j++) {\n        q[i] = tmp[j];\n    }\n\n}\n```\n\n### 二分查找\n\n> 标准模板\n\n```java\n// q是有序数组，l是左起点，r是右起点，x是期望找到的值   \n// 求上界\n    public static int upper_bound(int[] q,int l,int r,int x){\n        while(l < r){\n            int mid = l + r + 1>> 1;\n            if (q[mid] <= x) l = mid;\n            else r = mid - 1;\n        }\n        return l;\n    }\n\n    // 求下界\n    public static int lower_bound(int[] q,int l ,int r, int x){\n        while (l < r){\n            int mid = l + r >> 1;\n            if (q[mid] >= x)  r = mid;\n            else l = mid + 1;\n        }\n        return l;\n    }\n```\n\n> 浮点数二分\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 浮点数二分查找\n * https://www.acwing.com/problem/content/792/\n * @author: kudaompq\n * @date: 2021/12/30 14:04\n * @version: v1.0\n */\n\npublic class FloatMiddleSearch {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        double n = Double.parseDouble(reader.readLine());\n        double l = -100 , r = 100;\n        while (r - l > 0.00000001){\n            double mid = (l + r) / 2;\n            if (mid * mid * mid >= n) r = mid; \n            else l = mid; // 注意这里不用加减一了\n        }\n        System.out.printf(\"%.6f\",l);\n        reader.close();\n    }\n}\n```\n\n### 高精度模板\n\n> 因为我是使用java来写算法的，本身java自带了一个BigInteger就解决了高精度问题，\n>\n> 同理浮点数就用BigDecimal	\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.util.Arrays;\n\n/**\n * @description: 高精度\n * @author: kudaompq\n * @date: 2021/12/31 11:13\n * @version: v1.0\n */\n\npublic class HighPrecision {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String x = reader.readLine();\n        String y = reader.readLine();\n        BigInteger bx = new BigInteger(x);\n        BigInteger by = new BigInteger(y);\n        BigInteger[] res = bx.divideAndRemainder(by); // 相除的出约数和余数\n        System.out.println(res[0]+\"\\n\"+res[1]);\n 		System.out.println(bx.multiply(by)); // 求两数相乘\n        System.out.println(bx.subtract(by)); // 减法\n        System.out.println(bx.add(by));//加法\n        System.out.println(bx.max(by));// 比较哪个数更大\n        System.out.println(bx.min(by)); // 比较哪个数更小\n    }\n}\n```\n\n> 手写高精度加减\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.util.*;\n\n\n/**\n * @description: 高精度\n * @author: kudaompq\n * @date: 2021/12/31 11:13\n * @version: v1.0\n */\n\npublic class HighPrecision {\n\n    private static final int N = 1000010;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String x = reader.readLine();\n        String y = reader.readLine();\n        ArrayList<Integer> A = new ArrayList<>();\n        ArrayList<Integer> B = new ArrayList<>();\n        for (int i = x.length() - 1; i >= 0 ; i--) {\n            A.add(x.charAt(i) - \'0\');\n        }\n        for (int i = y.length() - 1; i >= 0 ; i--){\n            B.add(y.charAt(i) - \'0\');\n        }\n\n        List<Integer> res = null;\n        if (cmp(A,B)){\n            res = sub(A,B);\n        }else{\n            res = sub(B,A);\n            System.out.print(\"-\");\n        }\n        printBig(res);\n    }\n    \n\n    /**\n    * @Description: 高精度减法\n    * @Param: [A, B]\n    * @return: java.util.List<java.lang.Integer>\n    * @Author: Kudaompq\n    * @Date: 2021/12/31\n    */\n    public static List<Integer> sub(List<Integer> A,List<Integer> B){\n        List<Integer> C = new ArrayList<>();\n        for (int i = 0 , t = 0; i < A.size(); i++) {\n            t = A.get(i)- t;\n            if (i < B.size()) t -= B.get(i);\n            C.add((t + 10) % 10);\n            if (t < 0) t = 1;\n            else t = 0;\n        }\n        // 去除前导0\n        while (C.size() > 1 && C.get(C.size() - 1) == 0) C.remove(C.size() - 1);\n        return C;\n    }\n\n    /**\n    * @Description: 高精度加法\n    * @Param: [A, B]\n    * @return: java.util.List<java.lang.Integer>\n    * @Author: Kudaompq\n    * @Date: 2021/12/31\n    */\n    public static List<Integer> add(List<Integer> A,List<Integer> B){\n        if (A.size() < B.size()) return add(B,A);\n        ArrayList<Integer> C = new ArrayList<>();\n        int t = 0; // 进位\n        for (int i = 0; i < A.size() ; i++) {\n            t += A.get(i);\n            if (i < B.size()) t += B.get(i);\n            C.add(t % 10);\n            t /= 10;\n        }\n        if (t != 0) C.add(1);\n        return C;\n    }\n\n    /**\n    * @Description: 输出\n    * @Param: [res]\n    * @return: void\n    * @Author: Kudaompq\n    * @Date: 2021/12/31\n    */\n    public static void printBig(List<Integer> res){\n        // 由于运算后的得到的是逆序的\n        for (int i = res.size() - 1; i >= 0; i--) {\n            System.out.print(res.get(i));\n        }\n\n    }\n\n    // A >= B\n    public static boolean cmp(List<Integer> A,List<Integer> B){\n        if (A.size() != B.size()) return A.size() > B.size();\n        for (int i = A.size() - 1; i >= 0; i--) {\n            if (A.get(i) != B.get(i)) return A.get(i) > B.get(i);\n        }\n        return true;\n    }\n}\n```\n\n### 前缀和模板\n\n**注意:**前缀和数组的下标是从1开始的，因为S0必须是0\n\n> 一维前缀和\n\ns[i] = a[0] + a[1] + ... + a[i]\n\n前缀和=s[r] - s[l - 1]\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 前缀和\n * https://www.acwing.com/problem/content/797/\n * @author: kudaompq\n * @date: 2022/1/1 12:24\n * @version: v1.0\n */\n\npublic class PrefixAnd {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] tmp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(tmp[0]);\n        int m = Integer.parseInt(tmp[1]);\n        tmp = reader.readLine().split(\" \");\n        int[] sum = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            sum[i + 1] = sum[i] + Integer.parseInt(tmp[i]);\n        }\n        while (m-- > 0){\n            String[] split = reader.readLine().split(\" \");\n            int l = Integer.parseInt(split[0]);\n            int r = Integer.parseInt(split[1]);\n            System.out.println(sum[r] - sum[l - 1]);\n\n        }\n        reader.close();\n    }\n}\n```\n\n> 二维前缀和\n\n```java\n求前缀和公式：S[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]\n求区域和：x1,y1,x2,y2\nres = S[x2][y2] - s[x1 - 1][y2] - s[x2][y1 -1] + s[x1 - 1][y1 - 1]\n```\n\n \n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 二维前缀和\n * https://www.acwing.com/problem/content/798/\n * @author: kudaompq\n * @date: 2022/1/1 12:42\n * @version: v1.0\n */\n\npublic class PrefixAndTwo {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        int m = Integer.parseInt(temp[1]);\n        int q = Integer.parseInt(temp[2]);\n        int[][] graph = new int[n + 1][m + 1];\n        int[][] s = new int[n + 1][m + 1];\n        for (int i = 0; i < n; i++) {\n            temp = reader.readLine().split(\" \");\n            for (int j = 0; j < m; j++) {\n                graph[i + 1][j + 1] = Integer.parseInt(temp[j]);\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m ; j++) {\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + graph[i][j];\n            }\n        }\n        while (q-- > 0){\n            temp = reader.readLine().split(\" \");\n            int x1 = Integer.parseInt(temp[0]);\n            int y1 = Integer.parseInt(temp[1]);\n            int x2 = Integer.parseInt(temp[2]);\n            int y2 = Integer.parseInt(temp[3]);\n            int res = s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 -1] + s[x1 - 1][y1 -1];\n            System.out.println(res);\n        }\n\n\n    }\n}\n```\n\n### 差分模板\n\n差分就是让b[i] = a[i] - a[i - 1]\n\n所以a[i] = b[1] + b[2] + ... + b[i] \n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 差分\n * @author: kudaompq\n * https://www.acwing.com/problem/content/799/\n * @date: 2022/1/1 13:24\n * @version: v1.0\n */\n\npublic class Difference {\n    private static int[] a;\n    private static int[] b;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        int m = Integer.parseInt(temp[1]);\n\n        a = new int[n + 10];\n        b = new int[n + 10]; // 这里要大一点 \n        temp =reader.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            a[i + 1] = Integer.parseInt(temp[i]);\n        }\n        for (int i = 1; i <= n; i++) {\n            insert(i,i,a[i]);  //相当于初始化差分数组 ， 让每个b[i] = a[i] - a[i - 1]\n        }\n        while (m-- > 0){\n            temp = reader.readLine().split(\" \");\n            int l = Integer.parseInt(temp[0]);\n            int r = Integer.parseInt(temp[1]);\n            int c = Integer.parseInt(temp[2]);\n            insert(l,r,c);\n        }\n        // b的前缀和就是a[i]\n        for (int i = 1; i <= n; i++) {\n            b[i] += b[i - 1];\n        }\n        for (int i = 1; i <= n ; i++) {\n            System.out.print(b[i] + \" \");\n        }\n\n    }\n\n    // 差分精髓\n    private static void insert(int l,int r ,int c){\n        // 让a数组的l下标之后的数组元素都+c\n        b[l] += c;\n        // 让a数组r+1下边之后的数组元素都-c\n        b[r + 1] -=c;\n        // 两者相互调和之后就是让在l，r之间的数组+c\n    }\n}\n```\n\n> 差分矩阵\n\n差分矩阵主要是记住它的公式，和一维差分差不太多\n\n![image-20220101141205746](http://images.kudaompq.top/20220101141206.png)\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 差分矩阵\n * https://www.acwing.com/problem/content/description/800/\n * @author: kudaompq\n * @date: 2022/1/1 13:54\n * @version: v1.0\n */\n\npublic class DifferenceMatrix {\n    private static int[][] a;\n    private static int[][] b;\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        int m = Integer.parseInt(temp[1]);\n        int q = Integer.parseInt(temp[2]);\n        a = new int[n + 5][m + 5];\n        b = new int[n + 5][m + 5];\n        for (int i = 0; i < n; i++) {\n            temp = reader.readLine().split(\" \");\n            for (int j = 0; j < m; j++) {\n                a[i + 1][j + 1] = Integer.parseInt(temp[j]);\n            }\n        }\n        // 初始化差分矩阵\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                insert(i,j,i,j,a[i][j]);\n            }\n        }\n        while (q -- > 0){\n            temp = reader.readLine().split(\" \");\n            int x1 = Integer.parseInt(temp[0]);\n            int y1 = Integer.parseInt(temp[1]);\n            int x2 = Integer.parseInt(temp[2]);\n            int y2 = Integer.parseInt(temp[3]);\n            int c = Integer.parseInt(temp[4]);\n            insert(x1,y1,x2,y2,c);\n        }\n        // 求出前缀和\n        for (int i = 1; i <= n ; i++) {\n            for (int j = 1; j <= m ; j++) {\n                b[i][j] = b[i - 1][j] + b [i][j - 1] - b[i - 1][j - 1] + b[i][j];\n            }\n        }\n        for (int i = 1; i <= n ; i++) {\n            for (int j = 1; j <= m ; j++) {\n                System.out.print(b[i][j] + \" \");\n            }\n            System.out.println();\n        }\n        reader.close();\n\n    }\n\n    // 执行插入\n    private static void insert(int x1,int y1,int x2,int y2,int c){\n        // 对x1,y1之后的所有元素+c\n        b[x1][y1] += c;\n        b[x2 + 1][y1] -= c;\n        b[x1][y2 + 1] -= c;\n        // 对重复-c的部分+c\n        b[x2 + 1][y2 + 1] += c;\n    }\n}\n```\n\n### 双指针问题\n\n> 基本模板\n\n```java\nfor(int i = 0 , j = 0 ; i < n ;i++){\n    while(j < i && check(i,j)){\n        // 执行相关操作\n    }\n}\n```\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 双指针问题\n * https://www.acwing.com/problem/content/801/\n * @author: kudaompq\n * @date: 2022/1/2 12:17\n * @version: v1.0\n */\n\npublic class DoublePointer {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        int res = 0;\n        int[] a = new int[n];\n        int[] nums = new int[100005]; // 用来计数\n        String[] s = reader.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(s[i]);\n        }\n        // i的位置每次自动加一\n        for (int i = 0 , j = 0 ; i < n ; i++) {\n            nums[a[i]] ++;\n            // 为了保证j-i之间的数字元素都只出现一次，当i下标的数字超过1的时候j自动向右，直到这个数字只出现1\n            while (nums[a[i]] > 1){\n                nums[a[j]] --;\n                j++;\n            }\n            res = Math.max(res,i - j + 1);\n        }\n        System.out.println(res);\n\n    }\n}\n```\n\n### 位运算\n\n> 找出数字的第k位是几\n\n```java\n1. 先把第k位数移到最后一位 n>>k\n2. 看个位是几 n & 1\n即 n>>k&1\n```\n\n> 数字的最后一位1是多少\n\n```java\nlowbit(x):返回x的最后一位1\nx & -x = x & (~x + 1)\n```\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: TODO\n * https://www.acwing.com/problem/content/803/\n * @author: kudaompq\n * @date: 2022/1/2 13:20\n * @version: v1.0\n */\n\npublic class LowBit {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        String[] a = reader.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            int x = Integer.parseInt(a[i]);\n            int res = 0;\n            while (x > 0) {\n                // 每次减去最后一个1\n                x -= lowbit(x);\n                res++;\n            }\n            System.out.print(res+\" \");\n        }\n\n        reader.close();\n    }\n    private static int lowbit(int x){\n        return x & -x;\n    }\n}\n```\n\n### 离散化问题\n\n> 如果遇到数字之间差距非常大，但是数据量不大时可以使用\n\n1. 先将所有用到的key以及value包括区间下标用List存储起来\n2. 对List进行去重排序\n3. 定义一个find函数（二分查找）用来再List中查找使用的数据的下标，其实就是“映射”\n4. 使用数据时查找即可\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\n\n/**\n * @description: 离散化\n * https://www.acwing.com/activity/content/problem/content/836/\n * 第一步先将所有用到的下标以及value存储进一个数组中\n * 对数组进行排序去重\n * 在通过二分来查找需要数字在数组中的下标 ”映射“\n * 再进行处理即可\n * @author: kudaompq\n * @date: 2022/1/3 11:32\n * @version: v1.0\n */\n\npublic class Discretization {\n\n    private static List<Integer> alls = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        int m = Integer.parseInt(temp[1]);\n        int[] a = new int[400010];\n        int[] s = new int[400010];\n        ArrayList<Pair> adds = new ArrayList<>();\n        ArrayList<Pair> querys = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            temp = reader.readLine().split(\" \");\n            int x = Integer.parseInt(temp[0]);\n            int y = Integer.parseInt(temp[1]);\n            adds.add(new Pair(x,y));\n            alls.add(x);\n            alls.add(y);\n        }\n        for (int i = 0; i < m; i++) {\n            temp = reader.readLine().split(\" \");\n            int x = Integer.parseInt(temp[0]);\n            int y = Integer.parseInt(temp[1]);\n            querys.add(new Pair(x,y));\n            alls.add(x);\n            alls.add(y);\n        }\n        HashSet<Integer> set = new HashSet<>(alls);\n        alls = new ArrayList<>(set);\n        Collections.sort(alls);\n\n        for (Pair add : adds) {\n            int x = find(add.first);\n            a[x] += add.second;\n        }\n        for (int i = 1; i <= alls.size() ; i++) {\n            s[i] = s[i - 1] + a[i];\n        }\n        for (Pair query : querys) {\n            int l = find(query.first);\n            int r = find(query.second);\n            System.out.println(s[r] - s[l - 1]);\n        }\n\n    }\n\n    private static int find(int x){\n        int l = 0,r = alls.size() - 1;\n        while (l < r){\n            int mid = l + r >> 1;\n            if (alls.get(mid) >= x) r = mid;\n            else l = mid + 1;\n        }\n        return r + 1; // 因为下标是从1开始\n    }\n\n    static class Pair{\n        int first;\n        int second;\n        public Pair(int first,int second){\n            this.first = first;\n            this.second = second;\n        }\n    }\n}\n```\n\n### 区间合并\n\n1. 首先将所有区间的左端点进行排序\n2. 依次遍历，如果有一个区间的左端点比现在的右端点大说明存在另一个区间\n3. 更新区间，并存储原先区间\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\n/**\n * @description: 区间合并\n * https://www.acwing.com/problem/content/805/\n * @author: kudaompq\n * @date: 2022/1/3 13:07\n * @version: v1.0\n */\n\npublic class IntervalMerging {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        ArrayList<Pair> segs = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            temp = reader.readLine().split(\" \");\n            int l = Integer.parseInt(temp[0]);\n            int r = Integer.parseInt(temp[1]);\n            segs.add(new Pair(l,r));\n        }\n        merge(segs);\n    }\n\n    private static void merge(List<Pair> segs){\n        ArrayList<Pair> res = new ArrayList<>();\n        // 先对列表进行按照左端点进行排序\n        Collections.sort(segs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair o1, Pair o2) {\n                if (o1.first == o2.first) return  o1.second - o2.second;\n                return o1.first - o2.first;\n            }\n        });\n\n        int start = (int)-2e9 , end = (int)-2e9;\n        for (Pair seg : segs) {\n            if (end < seg.first){\n                if (start != (int)-2e9) res.add(new Pair(start,end)); // 记录区间\n                start = seg.first;\n                end = seg.second;\n            }\n            else end = Math.max(end, seg.second);\n        }\n        if (start != (int)-2e9) res.add(new Pair(start,end));\n        System.out.println(res.size());\n    }\n\n    static class Pair{\n        int first;\n        int second;\n        public Pair(int first,int second){\n            this.first = first;\n            this.second = second;\n        }\n\n        @Override\n        public String toString() {\n            return \"Pair{\" +\n                    \"first=\" + first +\n                    \", second=\" + second +\n                    \'}\';\n        }\n    }\n}\n```\n\n## 数据结构\n\n### 链表\n\n在算法中通常用数组来提高速度\n\n> 单链表\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 单链表\n * https://www.acwing.com/problem/content/828/\n * @author: kudaompq\n * @date: 2022/1/4 10:51\n * @version: v1.0\n */\n\npublic class SingleLinkedList {\n\n     static final int N = (int)1e6 + 10;\n     static int head; // 表示头结点的下标\n     static int[] e = new int[N]; // 表示节点i的值\n     static int[] ne = new int[N]; // 表示节点i的next指针是多少\n     static int idx; // 存储当前已经用到了哪个点\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        init();\n        int n = Integer.parseInt(reader.readLine());\n        while (n -- > 0){\n            String[] temp = reader.readLine().split(\" \");\n            if (temp[0].equals(\"H\")){\n                add_to_head(Integer.parseInt(temp[1]));\n            }else if (temp[0].equals(\"D\")){\n                int k = Integer.parseInt(temp[1]);\n                if (k == 0) {head = ne[head]; continue;}  // 当k=0的时候就要去除头节点\n                remove(k - 1);\n            }else{\n                add(Integer.parseInt(temp[1]) - 1,Integer.parseInt(temp[2]));\n            }\n        }\n        for (int i = head; i != -1 ; i = ne[i]) {\n            System.out.print(e[i] + \" \");\n        }\n    }\n\n    // 初始化\n    private static void init(){\n        head = -1;\n        idx = 0;\n    }\n\n    // 将x插入到头结点\n    private static void add_to_head(int x){\n        e[idx] = x;\n        ne[idx] = head;\n        head = idx;\n        idx++;\n    }\n\n    // 表示在第 k 个插入的数后面插入一个数 x\n    private static void add(int k,int x){\n        e[idx] = x;\n        ne[idx] = ne[k];\n        ne[k] = idx;\n        idx++;\n    }\n\n    // 删除第 k 个插入的数后面的数\n    private static void remove(int k){\n        ne[k] = ne[ne[k]];\n    }\n}\n```\n\n> 双向链表\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 双向链表\n * https://www.acwing.com/problem/content/829/\n * @author: kudaompq\n * @date: 2022/1/4 11:30\n * @version: v1.0\n */\n\npublic class DoubleLinkedList {\n    static final int N = (int) 1e5 + 10;\n    static int[] e = new int[N];\n    static int[] l = new int[N];\n    static int[] r = new int[N];\n    static int idx;\n    public static void main(String[] args) throws IOException {\n        init();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int m = Integer.parseInt(reader.readLine());\n        while (m -- > 0){\n            String[] temp = reader.readLine().split(\" \");\n            if (temp[0].equals(\"L\")){\n                add(l[r[0]],Integer.parseInt(temp[1]));\n            }else if (temp[0].equals(\"R\")){\n                add(l[1],Integer.parseInt(temp[1]));\n            }else if(temp[0].equals(\"D\")){\n                remove(Integer.parseInt(temp[1])+1);\n            }else if(temp[0].equals(\"IL\")){\n                add(l[Integer.parseInt(temp[1]) + 1],Integer.parseInt(temp[2]));\n            }else {\n                add(Integer.parseInt(temp[1]) + 1,Integer.parseInt(temp[2]));\n            }\n        }\n        for (int i = r[0]; i != 1 ; i = r[i]) {\n            System.out.print(e[i] + \" \");\n        }\n    }\n    private static void init(){\n        // 初始化 第一个点的右边是1 第二个点的左边是0\n        r[0] = 1;\n        l[1] = 0;\n        idx = 2;\n    }\n\n    // 在第k个节点的右边插入\n    private static void add(int k,int x){\n        e[idx] = x;\n        r[idx] = r[k];\n        l[idx] = k;\n        l[r[k]] = idx;\n        r[k] = idx;\n        idx++;\n    }\n    // 删除第k个点\n    private static void remove(int k){\n        r[l[k]] = r[k];\n        l[r[k]] = l[k];\n    }\n}\n```\n\n### 栈\n\n> 数组模拟栈\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 数组模拟栈\n * https://www.acwing.com/problem/content/830/\n * @author: kudaompq\n * @date: 2022/1/5 12:41\n * @version: v1.0\n */\n\npublic class SimulationStack {\n\n    private static final int N = (int)1e6 + 10;\n    private static int[] stk = new int[N];\n    private static int tt = -1;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        while (n-- > 0){\n            temp = reader.readLine().split(\" \");\n            if (temp[0].equals(\"push\")){\n                push(Integer.parseInt(temp[1]));\n            }else if (temp[0].equals(\"query\")){\n                query();\n            }else if(temp[0].equals(\"pop\")){\n                pop();\n            }else{\n                empty();\n            }\n        }\n\n    }\n\n    private static void push(int x){\n        stk[++tt] = x;\n    }\n\n    private static void pop(){\n        tt--;\n    }\n\n    private static void empty(){\n        if(tt == -1) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n    }\n\n    private static void query(){\n        System.out.println(stk[tt]);\n    }\n}\n```\n\n> 单调栈\n\n保证栈内单调递增或者递减\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 单调栈模板\n * https://www.acwing.com/problem/content/832/\n * @author: kudaompq\n * @date: 2022/1/5 12:26\n * @version: v1.0\n */\n\npublic class MonotoneStack {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        temp = reader.readLine().split(\" \");\n        int[] stk = new int[n+1];\n        int tt = 0;\n        for (int i = 0; i < n; i++) {\n            int x = Integer.parseInt(temp[i]);\n            while (tt > 0 && stk[tt] >= x) tt--; // 保证栈是单调递增的\n            if (tt > 0) System.out.print(stk[tt] + \" \");\n            else System.out.print(\"-1 \");\n            stk[++ tt] = x;\n        }\n    }\n}\n```\n\n### 队列\n\n> 用数组模拟队列\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 模拟队列\n * https://www.acwing.com/problem/content/831/\n * @author: kudaompq\n * @date: 2022/1/5 12:53\n * @version: v1.0\n */\n\npublic class SimulationQueue {\n\n    private static final int N = (int)1e6 + 10;\n    private static int[] stk = new int[N];\n    private static int hh = 0;\n    private static int tt = -1;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        while (n-- > 0){\n            temp = reader.readLine().split(\" \");\n            if (temp[0].equals(\"push\")){\n                push(Integer.parseInt(temp[1]));\n            }else if (temp[0].equals(\"query\")){\n                query();\n            }else if(temp[0].equals(\"pop\")){\n                pop();\n            }else{\n                empty();\n            }\n        }\n    }\n\n    private static void push(int x){\n        stk[++ tt] = x;\n    }\n\n    private static void pop(){\n        ++hh;\n    }\n\n    private static void empty(){\n        if (hh > tt) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n    }\n\n    private static void query(){\n        System.out.println(stk[hh]);\n    }\n}\n```\n\n> 滑动窗口\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 滑动窗口\n * @author: kudaompq\n * @date: 2022/1/5 14:57\n * @version: v1.0\n */\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        int k = Integer.parseInt(temp[1]);\n        int[] a = new int[n];\n        int[] q = new int[n];\n        int hh = 0 , tt = -1;\n        temp = reader.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(temp[i]);\n            if (i - k + 1 > q[hh]) hh++; // 维护窗口的起点\n            while (hh <= tt && a[i] <= a[q[tt]]) tt--; // 维护窗口尾部，使其单调递减\n            q[++tt] = i;\n            if (i + 1 >= k) System.out.print(a[q[hh]] + \" \");\n        }\n        System.out.println();\n        hh = 0;\n        tt = -1;\n\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(temp[i]);\n            if (i - k + 1 > q[hh]) hh++;\n            while (hh <= tt && a[i] >= a[q[tt]]) tt--;\n            q[++tt] = i;\n            if (i + 1 >= k) System.out.print(a[q[hh]] + \" \");\n        }\n\n    }\n}\n```\n\n### KMP算法\n\n> 由于字符串的暴力模拟效率非常低，而KMP算法就是在暴力的基础上，对匹配的过程使用前缀数组来减少时间的花销\n\n==前缀数组==就是用来记录当前下标可以从开头的哪一个位置开始\n\n![image-20220107150305551](http://images.kudaompq.top/20220107150306.png)\n\n字符串匹配我就不多说了\n\n```java\nimport java.io.*;\n\n/**\n * @description: kmp字符串匹配\n * @author: kudaompq\n * @date: 2022/1/7 14:03\n * @version: v1.0\n */\n\npublic class KMP {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(reader.readLine());\n        char[] p = new char[n + 1];\n        String P = reader.readLine();\n        for (int i = 0; i < n; i++) {\n            p[i + 1] = P.charAt(i);\n        }\n        int m = Integer.parseInt(reader.readLine());\n        char[] s = new char[m + 1];\n        String S = reader.readLine();\n        for (int i = 0; i < m ; i++) {\n            s[i + 1] = S.charAt(i);\n        }\n\n        int[] next = new int[n + 1];\n        // 因为下标为1的不需要匹配，所以从2开始匹配\n        for (int i = 2,j = 0; i <= n ; i++) {\n            while (j > 0 && p[i] != p[j + 1]) j = next[j];\n            if (p[i] == p[j + 1]) j ++;\n            next[i] = j;\n        }\n        for (int i = 1 ,j = 0; i <= m ; i++) {\n            while (j > 0  && s[i] != p[j + 1]) j = next[j];\n            if (s[i] == p[j + 1]) j++;\n            if (j == n){\n                writer.write(i - n + \" \");\n                j = next[j];\n            }\n        }\n        writer.flush();\n        reader.close();\n        writer.close();\n    }\n}\n```\n\n注意：这里下标从1开始是为了存储当字符串不匹配的时候开始的位置\n\n### Trie字典树\n\nTrie树又称字典树、单词查找树。是一种能够高效存储和查找字符串集合的数据结构\n\n字典树样例\n\n![image-20220109123844101](http://images.kudaompq.top/20220109123844.png)\n\n![image-20220109123856044](http://images.kudaompq.top/20220109123856.png)\n\n> 插入操作\n\n```java\npublic static void insert(char[] str){\n    int p = 0;\n    for (int i = 0; i < str.length; i++) {\n        int u = str[i] - \'a\';\n        if (son[p][u] == 0) son[p][u] = ++ idx;\n        p = son[p][u];\n    }\n    cnt[p]++;\n}\n```\n\n> 查询操作\n\n```java\npublic static int query(char[] str){\n    int p = 0;\n    for (int i = 0; i < str.length; i++) {\n        int u = str[i] - \'a\';\n        if (son[p][u] == 0) return 0;\n        p = son[p][u];\n    }\n    return cnt[p];\n}\n```\n\n**完整代码**\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: Trie字典树\n * https://www.acwing.com/problem/content/description/837/\n * @author: kudaompq\n * @date: 2022/1/9 11:14\n * @version: v1.0\n */\n\npublic class Trie {\n\n    static final int N = (int)1e5 + 10;\n    static int[][] son = new int[N][26]; // 字典树\n    static int[] cnt = new int[N]; // 记录当前点字符串的个数\n    static int idx = 0; // 下一个节点的大致位置\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        while (n-- > 0){\n            String[] temp = reader.readLine().split(\" \");\n            char[] chars = temp[1].toCharArray();\n            if (temp[0].equals(\"I\")){\n                insert(chars);\n            }else{\n                System.out.println(query(chars));\n            }\n        }\n    }\n\n    public static void insert(char[] str){\n        int p = 0;\n        for (int i = 0; i < str.length; i++) {\n            int u = str[i] - \'a\';\n            if (son[p][u] == 0) son[p][u] = ++ idx;\n            p = son[p][u];\n        }\n        cnt[p]++;\n    }\n\n    public static int query(char[] str){\n        int p = 0;\n        for (int i = 0; i < str.length; i++) {\n            int u = str[i] - \'a\';\n            if (son[p][u] == 0) return 0;\n            p = son[p][u];\n        }\n        return cnt[p];\n    }\n}\n```\n\n### 并查集\n\n1. 将两个集合合并\n2. 询问两个元素是否在一个集合当中\n\n>基本原理：每个集合用一颗树来表示。树根的编号就是整个集合的编号。每个节点存储它的父节点，p[x]表示x的父节点\n\n问题1：如何判断树根：if(p[x] == x)\n\n问题2：如何求x的集合编号：while (p[x] != x) x = p[x];\n\n问题3：如何合并集合：px是x的集合编号，py是y的集合编号。p[x] = y\n\n> 最基础版本\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 并查集算法\n * @author: kudaompq\n * @date: 2022/1/9 13:40\n * @version: v1.0\n */\n\npublic class UnionAndFind {\n\n    static final int N = (int) 1e5 + 10;\n    static int p[] = new int[N];\n\n    // 找到祖宗节点，路径压缩\n    static int find(int x){\n        if (p[x] != x) p[x] = find(p[x]);\n        return p[x];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        for (int i = 1; i <= n ; i++) {\n            p[i] = i;\n        }\n        int m = Integer.parseInt(temp[1]);\n        while (m -- > 0){\n            temp = reader.readLine().split(\" \");\n            int x = Integer.parseInt(temp[1]);\n            int y = Integer.parseInt(temp[2]);\n            if (temp[0].equals(\"M\")){\n                p[find(x)] = find(y);\n            }else{\n                if (find(x) == find(y)) System.out.println(\"Yes\");\n                else System.out.println(\"No\");\n            }\n        }\n    }\n}\n```\n\n> 如果要获得每个区间内的元素个数，需要开辟一个size数组进行记录，同时只修改根节点的个数\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 连通块中的数量\n * https://www.acwing.com/problem/content/description/839/\n * @author: kudaompq\n * @date: 2022/1/9 14:18\n * @version: v1.0\n */\n\npublic class UnionAndFindNum {\n\n    static final int N = (int) 1e5 + 10;\n    static int p[] = new int[N];\n    static int num[] = new int[N];\n\n    // 找到祖宗节点，路径压缩\n    static int find(int x){\n        if (p[x] != x) p[x] = find(p[x]);\n        return p[x];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] temp = reader.readLine().split(\" \");\n        int n = Integer.parseInt(temp[0]);\n        for (int i = 1; i <= n ; i++) {\n            p[i] = i;\n            num[i] = 1;\n        }\n        int m = Integer.parseInt(temp[1]);\n        while (m -- > 0){\n            temp = reader.readLine().split(\" \");\n            int x = Integer.parseInt(temp[1]);\n            if (temp[0].equals(\"C\")){\n                int y = Integer.parseInt(temp[2]);\n                int pX = find(x);\n                int pY = find(y);\n                p[pX] = pY;\n                if (pX != pY){\n                    // 只看根节点的个数\n                    num[pY] += num[pX];\n                }\n            }else if (temp[0].equals(\"Q1\")){\n                int y = Integer.parseInt(temp[2]);\n                if (find(x) == find(y)) System.out.println(\"Yes\");\n                else System.out.println(\"No\");\n            }else{\n                System.out.println(num[find(x)]);\n            }\n        }\n    }\n}\n```\n\n> 带权并查集\n\n```java\npackage acwing;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: TODO\n * https://www.acwing.com/problem/content/242/\n * @author: kudaompq\n * @date: 2022/1/10 13:25\n * @version: v1.0\n */\n\npublic class NO240 {\n\n    static int[] f;\n    static int[] d;\n    // d数组用来存储到根节点的距离 余1表示可以吃根节点，余2表示可以被根节点吃，余0就是根节点的同类\n    static int find(int x){\n        if (f[x] != x){\n            int root = find(f[x]);\n            d[x] = (d[x] + d[f[x]] + 3) % 3;\n            f[x] = root;\n        }\n        return f[x];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = reader.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int m = Integer.parseInt(s[1]);\n        f = new int[n + 1];\n        d = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            f[i] = i;\n        }\n        int res = 0 ;\n        while (m-- > 0){\n            s = reader.readLine().split(\" \");\n            int t = Integer.parseInt(s[0]) - 1;\n            int a = Integer.parseInt(s[1]);\n            int b = Integer.parseInt(s[2]);\n            if (a > n || b > n){\n                res++;\n                continue;\n            }\n            int x = find(a);\n            int y = find(b);\n            if (x != y){\n                d[x] = (d[b] + t - d[a] + 3) % 3;\n                f[x] = f[y];\n            }else{\n                if ((d[a] -d[b] + 3) % 3 != t) res++;\n            }\n\n        }\n        System.out.println(res);\n    }\n\n}\n```\n\n这道题我看了好久，食物链问题，主要是增加了一个d距离数组，用来记录每个点到根节点的距离来确他们的关系\n\n### 堆\n\n```java\n手写堆\n1. 插入一个数 heap[++size] = x;up(size);\n2. 求堆当中的最小值 heap[1];\n3. 删除最小值 heap[1] = heap[size]; size--;down(1);\n4. 删除任意一个元素 heap[k] = heap[size];size--; down(k) 或者 up(k)\n5. 修改任意一个元素 heap[k] = x;down(k) 或者 up(k）\n```\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * @description: 堆排\n * https://www.acwing.com/problem/content/840/\n * @author: kudaompq\n * @date: 2022/1/11 11:24\n * @version: v1.0\n */\n\npublic class HeapSort {\n\n    static final int N = (int) 1e5 + 10;\n    static int[] h = new int[N];\n    static int size;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = reader.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int m = Integer.parseInt(s[1]);\n        s = reader.readLine().split(\" \");\n        size = n;\n        for (int i = 0; i < n; i++) {\n            h[i + 1] = Integer.parseInt(s[i]);\n        }\n        for (int i = n / 2; i > 0 ; i--) {\n            down(i);\n        }\n        while (m-- > 0){\n            System.out.print(h[1] + \" \");\n            h[1] = h[size];\n            size--;\n            down(1);\n        }\n    }\n\n    static void down(int u){\n        int t = u;\n        if (u * 2 <= size && h[u * 2] < h[t]) t = u * 2;\n        if (u * 2 + 1 <= size && h[u * 2 + 1] < h[t]) t = u * 2 + 1;\n        if (u != t){\n            int temp = h[t];\n            h[t] = h[u];\n            h[u] = temp;\n            down(t);\n        }\n    }\n    static void up(int u){\n        if (u / 2 > 0 && h[u] < h[u / 2]){\n            int temp = h[u];\n            h[u] = h[u / 2];\n            h[u / 2] = temp;\n            up(u / 2);\n        }\n    }\n}\n```\n\n```java\nimport java.io.*;\n\n/**\n * @description: TODO\n * https://www.acwing.com/problem/content/841/\n * @author: kudaompq\n * @date: 2022/1/11 12:36\n * @version: v1.0\n */\n\npublic class HeapSimulation {\n\n    static int[] h;\n    static int[] ph; // 第k个数插入到堆书组长到第k个插入的映射\n    static int[] hp; // 表示堆数组中下标到第k个数的映射\n    static int size;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(reader.readLine());\n        h = new int[n + 1];\n        hp = new int[n + 1];\n        ph = new int[n + 1];\n        int m = 0;\n        while (n -- > 0){\n            String[] s = reader.readLine().split(\" \");\n            String op = s[0];\n            if (\"I\".equals(op)){\n                int x = Integer.parseInt(s[1]);\n                m ++;\n                h[++ size] = x;\n                ph[m] = size;\n                hp[size] = m;\n                up(size);\n            }else if (\"PM\".equals(op)){\n                writer.write(h[1] + \"\\n\");\n            }else if (\"DM\".equals(op)){\n                heapSwap(1,size);\n                size--;\n                down(1);\n            }else if (\"D\".equals(op)){\n                int k = Integer.parseInt(s[1]);\n                int u = ph[k]; // 获得第k个数在堆中的下标\n                heapSwap(u,size);\n                size--;\n                up(u); // 这两个只会执行一个\n                down(u);\n            }else{\n                int k = Integer.parseInt(s[1]);\n                int x = Integer.parseInt(s[2]);\n                h[ph[k]] = x;\n                down(ph[k]);\n                up(ph[k]);\n            }\n        }\n        writer.flush();\n    }\n\n     // 主要是这里需要交换三个数组中元素的位置\n    static void heapSwap(int u,int v){\n        swap(h,u,v);\n        swap(hp,u,v);\n        swap(ph,hp[u],hp[v]);\n    }\n\n    static void swap(int[] a,int u,int v){\n        int tmp = a[u];\n        a[u] = a[v];\n        a[v] = tmp;\n    }\n\n    static void down(int u){\n        int t = u;\n        if (u * 2 <= size && h[u * 2] < h[t]) t = u * 2;\n        if (u * 2 + 1 <= size && h[u * 2 + 1] < h[t]) t = u * 2 + 1;\n        if (u != t){\n            heapSwap(u,t);\n            down(t);\n        }\n    }\n\n    static void up(int u){\n        if (u / 2 > 0 && h[u] < h [u / 2]){\n            heapSwap(u,u/2);\n            up(u/2);\n        }\n    }\n}\n```\n\n### 哈希表\n\n主要是利用散列函数（mod）和链表（用于解决映射到同个位置的冲突）来实现\n\n1. 计算Hash函数的值（```int k = (x % N + N) % N  ```）\n2. 定位到对应链表中依次遍历和比较\n\n哈希表可以分为**拉链法**和**开放寻址法**来实现\n\n> 拉链法\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: 使用拉链法模拟散列表\n * https://www.acwing.com/problem/content/842/\n * @author: kudaompq\n * @date: 2022/1/13 13:32\n * @version: v1.0\n */\n\npublic class Hash1 {\n\n    static final int N = 100003;\n    static int[] h = new int[N];\n    static int[] e = new int[N];\n    static int[] ne = new int[N];\n    static int idx = 0;\n\n    public static void main(String[] args) throws IOException {\n        Arrays.fill(h,-1);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        while (n-- > 0){\n            String[] s = reader.readLine().split(\" \");\n            if (s[0].equals(\"I\")){\n                insert(Integer.parseInt(s[1]));\n            }else{\n                if (query(Integer.parseInt(s[1]))){\n                    System.out.println(\"Yes\");\n                }else {\n                    System.out.println(\"No\");\n                }\n            }\n        }\n    }\n    // 头插法插入\n    private static void insert(int x){\n        int k = (x % N + N) % N;\n        e[idx] = x;\n        ne[idx] = h[k];\n        h[k] = idx++;\n    }\n    // 查询\n    private static boolean query(int x){\n        int k = (x % N + N) % N;\n        for (int i = h[k]; i != -1 ; i = ne[i]) {\n            if (e[i] == x){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n>开放寻址法\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Collections;\n\n/**\n * @description: 开放寻址法\n * https://www.acwing.com/problem/content/842/\n * @author: kudaompq\n * @date: 2022/1/13 14:51\n * @version: v1.0\n */\n\npublic class Hash2 {\n\n    private static final int N = 200003;\n    private static Integer[] h = new Integer[N];\n\n    private static int find(int x){\n        int k = (x % N + N) % N;\n        while (h[k] != null && h[k] != x){\n            k++;\n            if (k == N) k = 0;\n        }\n        return k;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        Arrays.fill(h,null);\n        int n = Integer.parseInt(reader.readLine());\n        while (n-- > 0){\n            String[] s = reader.readLine().split(\" \");\n            int k = find(Integer.parseInt(s[1]));\n            if (s[0].equals(\"I\")){\n                h[k] = Integer.parseInt(s[1]);\n            }else{\n                System.out.println(h[k] == null ? \"No\" : \"Yes\");\n            }\n        }\n    }\n}\n```\n\n> 字符串hash\n\n```java\nimport java.io.*;\n\n/**\n * @description: 字符串哈希\n * https://www.acwing.com/problem/content/843/\n * @author: kudaompq\n * @date: 2022/1/13 14:59\n * @version: v1.0\n */\n\npublic class HashString {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int m = Integer.parseInt(s[1]);\n        String str = reader.readLine();\n        int P = 131;\n        long[] h = new long[n + 10]; // 存储哈希值\n        long[] p = new long[n + 10]; // p数组为了计算指定字符串的hash需要往后移动多少位需要乘以这个数组\n        p[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            p[i] = p[i - 1] * P;\n            h[i] = h[i - 1] * P + str.charAt(i - 1);\n        }\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int l1 = Integer.parseInt(s[0]);\n            int r1 = Integer.parseInt(s[1]);\n            int l2 = Integer.parseInt(s[2]);\n            int r2 = Integer.parseInt(s[3]);\n            // 这里判断两个字符串得哈希值是否相等\n            String out = h[r1] - h[l1 - 1] * p[r1 - l1 + 1] == h[r2] - h[l2 - 1] * p[r2 - l2 + 1] ? \"Yes\" : \"No\";\n            writer.write(out + \"\\n\");\n        }\n        writer.flush();\n    }\n}\n```\n\n## 搜索\n\n主要有DFS深度优先搜索和BFS宽度优先搜索\n\n### DFS\n\n```java\npackage template.DFSANDBFS;\n\nimport java.io.*;\n\n/**\n * @description: DFS\n * https://www.acwing.com/problem/content/844/\n * @author: kudaompq\n * @date: 2022/1/15 11:15\n * @version: v1.0\n */\n\npublic class DFS {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static int[] ans;\n    static boolean[] used;\n    static int n;\n    public static void main(String[] args) throws IOException {\n        n = Integer.parseInt(reader.readLine());\n        ans = new int[n + 1];\n        used = new boolean[n + 1];\n        dfs(0);\n        writer.flush();\n    }\n\n    private static void dfs(int x) throws IOException {\n        if (n == x){\n            for (int i = 0; i < n ; i++) {\n                writer.write(ans[i]+\" \");\n            }\n            writer.write(\"\\n\");\n            return;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (!used[i]){\n                used[i] = true;\n                ans[x] = i;\n                dfs(x + 1);\n                used[i] = false;\n            }\n        }\n\n    }\n}\n```\n\n**经典的八皇后问题**\n\n```java\nimport java.io.*;\n\n/**\n * @description: 八皇后问题\n * https://www.acwing.com/problem/content/845/\n * @author: kudaompq\n * @date: 2022/1/15 11:24\n * @version: v1.0\n */\n\npublic class EightQueens {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static int n;\n    static char[][] g;\n    static boolean[] col,dg,udg;\n\n    public static void main(String[] args) throws IOException {\n         n = Integer.parseInt(reader.readLine());\n         g = new char[n + 1][n + 1];\n         col = new boolean[n + 1];\n         dg = new boolean[2 * n +1];\n         udg = new boolean[2 * n + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                g[i][j] = \'.\';\n            }\n        }\n        dfs(0);\n        writer.flush();\n    }\n\n    private static void dfs(int u) throws IOException {\n        if (u == n){\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n - 1; j++) {\n                    writer.write(g[i][j]);\n                }\n                writer.write(\"\\n\");\n            }\n            writer.write(\"\\n\");\n            return;\n        }\n        for (int i = 0; i < n; i++) {\n            if (!col[i] && !dg[u + i] && !udg[n - u + i]){\n                g[u][i] = \'Q\';\n                col[i] = dg[u + i] = udg[n - u + i] = true;\n                dfs(u + 1);\n                col[i] = dg[u + i] = udg[n - u + i] = false;\n                g[u][i] = \'.\';\n            }\n        }\n\n    }\n\n}\n```\n\n### BFS\n\n可以用宽度优先搜索来求最短路问题\n\n```java\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\n/**\n * @description: BFS模板题\n * https://www.acwing.com/problem/content/846/\n * @author: kudaompq\n * @date: 2022/1/15 16:29\n * @version: v1.0\n */\n\npublic class BFS {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static int[][] g;\n    static int[][] d;\n    static int n,m;\n    static LinkedList<Pair> q = new LinkedList<>();\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        g = new int[n + 1][m + 1];\n        d = new int[n + 1][m + 1];\n        for (int i = 0; i < n; i++) {\n            s = reader.readLine().split(\" \");\n            Arrays.fill(d[i + 1],-1);\n            for (int j = 0; j < m; j++) {\n                g[i + 1][j + 1] = Integer.parseInt(s[j]);\n            }\n        }\n        System.out.println(bfs());\n    }\n\n    private static int bfs(){\n        q.offer(new Pair(1,1));\n        d[1][1] = 0;\n        int[] dx = new int[]{-1,0,1,0};\n        int[] dy = new int[]{0,-1,0,1};\n        while (!q.isEmpty()){\n            Pair now = q.poll();\n            for (int i = 0; i < 4; i++) {\n                int x = now.x + dx[i];\n                int y = now.y + dy[i];\n                if (x > 0 && x <= n && y > 0 && y <= m && g[x][y] == 0 && d[x][y] == -1){\n                    // 因为第一次到这个点肯定是最近的\n                    d[x][y] = d[now.x][now.y] + 1;\n                    q.offer(new Pair(x,y));\n                }\n            }\n        }\n        return d[n][m];\n\n    }\n    static class Pair{\n        int x;\n        int y;\n\n        public Pair(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```\n\n### DFS搜索二叉树\n\n用链表作邻接表的基本操作就是插入还有查询\n\n```java\n      // 链表插入模板\n      static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx++;\n    }\n   \n   // 树遍历的dfs模板\n private static void dfs(int u){\n         st[u] = true;\n         for (int i = h[u] ; i != -1 ; i = ne[i]) {\n             int j = e[i];\n             if (!st[j]){\n               dfs(i);\n             }\n         }\n     }\n```\n\n例子\n\n```java\npackage template.DFSANDBFS;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: TODO\n * https://www.acwing.com/problem/content/848/\n * @author: kudaompq\n * @date: 2022/1/16 11:11\n * @version: v1.0\n */\n\npublic class DFSTree {\n\n    private static final int  N = 100010, M = N * 2;\n\n    static int n;\n    static int[] h = new int[N];\n    static int[] e = new int[M];\n    static int[] ne = new int[M];\n    static boolean[] st = new boolean[N];\n    static int idx;\n\n    static int ans = N;\n\n    static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx++;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        n = Integer.parseInt(reader.readLine());\n        Arrays.fill(h,-1);\n        for (int i = 0; i < n - 1; i++) {\n            String[] s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            // 无向图需要连通两个方向\n            add(a,b);\n            add(b,a);\n        }\n        dfs(1);\n        System.out.println(ans);\n\n    }\n\n    // 返回以u为根的子树中的节点个数\n    private static int dfs(int u){\n        st[u] = true;\n        int sum = 1; // 记录包含这个数的最大连通点数\n        int res = 0; // 记录子树中的最大连通节点个数\n        for (int i = h[u] ; i != -1 ; i = ne[i]){\n            int j = e[i];\n            if ( !st[j] ){\n                int t = dfs(j);\n                res = Math.max(res,t); // 求最大的子树节点数\n                sum += t; // 加入以u为根的树的节点个数 为了求总节点数\n            }\n        }\n        res = Math.max(res,n - sum); // 选择以u节点为重心，最大的连通子图节点数,看看是这个树的最大还是除这个树之外的最大\n        ans = Math.min(res,ans);\n        return sum;\n    }\n\n    // 树遍历的dfs模板\n    // private static void dfs(int u){\n    //     st[u] = true;\n    //     for (int i = h[u] ; i != -1 ; i = ne[i]) {\n    //         int j = e[i];\n    //         if (!st[j]){\n    //             dfs(i);\n    //         }\n    //     }\n    // }\n}\n```\n\n### BFS搜索图\n\n众所周知BFS可以用来求最短路径，所以可以用来求两个地方之间的距离\n\n\n\n```java\npackage template.DFSANDBFS;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\n/**\n * @description: TODO\n * 求最短距离可以使用bfs\n * https://www.acwing.com/problem/content/description/849/\n * @author: kudaompq\n * @date: 2022/1/16 12:02\n * @version: v1.0\n */\n\npublic class BFSTree {\n\n    static final int N = 100010;\n    static int[] h = new int[N];\n    static int[] e = new int[N];\n    static int[] ne = new int[N];\n    static int[] d = new int[N];\n    static boolean[] st = new boolean[N];\n    static int n,m;\n    static int idx;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = reader.readLine().split(\" \");\n        Arrays.fill(h,-1);\n         n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            add(a,b);\n        }\n        System.out.println(bfs());\n    }\n\n    private static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx++;\n    }\n\n    private static int bfs(){\n        LinkedList<Integer> q  = new LinkedList<>();\n        q.offer(1);\n        st[1] = true;\n        while (!q.isEmpty()){\n            Integer t = q.poll();\n            if (t == n) return d[t];\n            for (int i = h[t]; i != -1 ; i = ne[i]) {\n                int j = e[i];\n                if (!st[j]){\n                    q.offer(j);\n                    d[j] = d[t] + 1;\n                    st[j] = true;\n                }\n\n            }\n        }\n\n        return -1;\n    }\n}\n```\n\n### 拓扑算法\n\n拓扑算法用在有向无环图重\n\n拓扑算法就是利用BFS从入度为0的开始遍历所有关联节点，直到最后所有节点都被遍历\n\n```java\npackage template.DFSANDBFS;\n\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\n/**\n * @description: 拓扑算法\n * @author: kudaompq\n * @date: 2022/1/16 17:17\n * @version: v1.0\n */\n\npublic class Topology {\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static final int N = 100010;\n\n    static int[] h = new int[N];\n    static int[] e = new int[N];\n    static int[] ne = new int[N];\n    static int[] info = new int[N];\n    static boolean[] vis = new boolean[N];\n    static int idx;\n\n    static int n,m;\n    public static void main(String[] args) throws IOException {\n\n        String[] s = reader.readLine().split(\" \");\n        Arrays.fill(h,-1);\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        while (m-- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            add(a,b);\n            info[b]++;\n        }\n        if (bfs()) {writer.flush();}\n        else{\n            System.out.println(-1);\n        }\n    }\n\n    private static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx++;\n    }\n\n    private static boolean bfs() throws IOException {\n        LinkedList<Integer> q = new LinkedList<>();\n        for (int i = 1; i <= n ; i++) {\n            // 入度为0的时候入队\n            if (info[i] == 0){\n                q.offer(i);\n            }\n        }\n        while (!q.isEmpty()){\n            Integer t = q.poll();\n            writer.write(t + \" \");\n            vis[t] = true;\n            for (int i = h[t]; i != -1 ; i = ne[i]) {\n                int j = e[i];\n                if (!vis[j] && --info[j] == 0){\n                    q.offer(j);\n                }\n            }\n        }\n        // 看是否所有的点都被使用过，没有被使用完说明不是拓扑序列\n        for (int i = 1; i <= n ; i++) {\n            if (!vis[i]){\n                return false;\n            }\n        }\n        return true;\n\n    }\n}\n```\n\n## 图论\n\n![image-20220117143016809](http://images.kudaompq.top/20220117143016.png)\n\n### Dijkstra算法\n\n用于求没有负权边的单源最短路问题\n\n注意：因为朴素版的是稠密图所以用邻接矩阵来存储边，而堆优化版是稀疏图用邻接表来存储\n\n解题方法\n\n```java\n(1) d[1] = 0 d[i] = +INF // 第一步初始化距离数组\n(2) for (int i = 1; i <= n ; i++) {\n            int t = -1; // 寻找未被使用的最小的点\n            for (int j = 1; j <= n ; j++) {\n                if (!st[j] && (t == -1 || d[t] > d[j] )){\n                    t = j;\n                }\n            }\n            st[t] = true;\n            // 找到最小的点后再对与该点有关的点进行更新\n            for (int j = 1; j <= n ; j++) {\n                d[j] = Math.min(d[j],d[t] + g[t][j]);\n            }\n        }\n		// 判断是否存在	\n(3)     if (d[n] == 0x3f3f3f3f){\n            return -1;\n        }\n        return d[n];\n```\n\n> 朴素版Dijkstra\n\n```java\npackage template.Graph;\n\n\nimport java.io.*;\nimport java.util.Arrays;\n\n/**\n * @description: TODO\n * @author: kudaompq\n * @date: 2022/1/16 20:08\n * @version: v1.0\n */\n\npublic class Dijkstra {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static int n,m;\n    static int[][] g;\n    static int[] d;\n    static boolean[] st;\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        g = new int[n + 1][n + 1];\n        d = new int[n + 1];\n        st = new boolean[n + 1];\n        // 初始化\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(g[i + 1],0x3f3f3f3f);\n        }\n        Arrays.fill(d,0x3f3f3f3f);\n        d[1] = 0;\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int x = Integer.parseInt(s[0]);\n            int y = Integer.parseInt(s[1]);\n            int z = Integer.parseInt(s[2]);\n            g[x][y] = Math.min(g[x][y],z);\n        }\n        System.out.println(dijkstra());\n    }\n\n    private static int dijkstra(){\n        for (int i = 1; i <= n ; i++) {\n            int t = -1; // 寻找未被使用的最小的点\n            for (int j = 1; j <= n ; j++) {\n                if (!st[j] && (t == -1 || d[t] > d[j] )){\n                    t = j;\n                }\n            }\n            st[t] = true;\n            // 找到最小的点后再对与该点有关的点进行更新\n            for (int j = 1; j <= n ; j++) {\n                d[j] = Math.min(d[j],d[t] + g[t][j]);\n            }\n        }\n        if (d[n] == 0x3f3f3f3f){\n            return -1;\n        }\n        return d[n];\n    }\n}\n```\n\n> 堆优化版Dijkstra\n\n```java\npackage template.Graph;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.PriorityQueue;\n\n/**\n * @description: TODO\n * @author: kudaompq\n * @date: 2022/1/16 22:25\n * @version: v1.0\n */\n\npublic class Dijkstra2 {\n\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static int n,m,idx;\n    static int[] h,ne,e,w;\n    static int[] d;\n    static boolean[] st;\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        h = new int[100010];\n        ne = new int[100010];\n        e = new int[100010];\n        w = new int[100010];\n        st = new boolean[n + 1];\n        d = new int[n + 1];\n        Arrays.fill(h,-1);\n        Arrays.fill(d,0x3f3f3f3f);\n        d[1] = 0;\n        while (m-- > 0){\n            s = reader.readLine().split(\" \");\n            add(Integer.parseInt(s[0]),Integer.parseInt(s[1]),Integer.parseInt(s[2]));\n        }\n        System.out.println(dijkstra());\n\n    }\n    private static int dijkstra(){\n        // 优先队列小根堆\n        PriorityQueue<Pair> q = new PriorityQueue<>((a,b)->{return a.y-b.y;});\n        q.offer(new Pair(1,0));\n        while (!q.isEmpty()){\n            Pair now = q.poll();\n            int t = now.x , distance = now.y;\n            if (st[t]) continue;\n            st[t] = true;\n            for (int i = h[t]; i != -1 ; i = ne[i]) {\n                int j = e[i];\n                if (d[j] > distance + w[i]){\n                    d[j] = distance + w[i];\n                    q.offer(new Pair(j,d[j]));\n                }\n            }\n        }\n        if (d[n] == 0x3f3f3f3f) return -1;\n        return d[n];\n    }\n\n    private static void add(int a,int b,int c){\n        e[idx] = b;\n        w[idx] = c;\n        ne[idx] = h[a];\n        h[a] = idx ++;\n    }\n\n    static class Pair{\n        int x;\n        int y;\n\n        public Pair(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```\n\n### Bellman-Ford算法\n\n用来解决存在负权边或者限定边数的情况下的最短路径问题\n\n解决思路\n\n```java\nfor k （循环k次）\n    back = dist // 备份\n	for 所有边 a,b,w (松弛操作)\n		dist[b] = min(dist[b],back[a] + w)\n// 注意，因为需要对上一次的距离数组进行操作，但是距离数组会随操作而改变，所以需要备份dist数组就是back\n```\n\n模板样例\n\n```java\npackage template.Graph;\n\nimport java.io.*;\nimport java.util.Arrays;\n\n/**\n * @description: TODO\n * @author: kudaompq\n * @date: 2022/1/17 13:33\n * @version: v1.0\n */\n\npublic class BellmanFord {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n    static final int INF = 0x3f3f3f3f;\n    static int n,m,k;\n    static Node[] nodes;\n    static int[] d,copyD;\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        k = Integer.parseInt(s[2]);\n        d = new int[n + 1];\n        copyD = new int[n + 1];\n        nodes = new Node[m + 1];\n        for (int i = 1; i <= m ; i++) {\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            int c = Integer.parseInt(s[2]);\n            nodes[i] = new Node(a,b,c);\n        }\n        bellmanFord();\n\n    }\n    static void   bellmanFord() throws IOException {\n        Arrays.fill(d,INF);\n        d[1] = 0;\n        for (int i = 0; i < k; i++) {\n            // 防止数组值变化影响\n            copyD = Arrays.copyOf(d,n + 1);\n            for (int j = 1; j <= m; j++) {\n                Node node = nodes[j];\n                int x = node.x;\n                int y = node.y;\n                int w = node.w;\n                d[y] = Math.min(d[y],copyD[x] + w);\n            }\n        }\n        if (d[n] > INF / 2) System.out.println(\"impossible\");\n        else System.out.println(d[n]);\n    }\n\n    static class Node{\n        int x;\n        int y;\n        int w;\n\n        public Node(int x, int y, int w) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n        }\n    }\n}\n```\n\n### SPFA算法\n\nSPFA是对Bellman-Ford算法的优化，用队列来存储距离改变的那些点继续进行处理，而Bellman-Ford算法会遍历所有的边\n\n```java\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\n/**\n * @description: TODO\n * https://www.acwing.com/problem/content/description/853/\n * @author: kudaompq\n * @date: 2022/1/17 14:45\n * @version: v1.0\n */\n\npublic class SPFA {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static final int INF = 0x3f3f3f3f;\n    static final int N = (int)1e5 + 10;\n    static int[] h,e,ne,w,d;\n    static boolean[] st;\n    static int idx,n,m;\n\n\n    public static void main(String[] args) throws IOException {\n\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        h = new int[n + 1];\n        e = new int[m + 1];\n        ne = new int[m + 1];\n        w = new int[m + 1];\n        st = new boolean[n + 1];\n        d = new int[n + 1];\n        Arrays.fill(h,-1);\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            int c = Integer.parseInt(s[2]);\n            add(a,b,c);\n        }\n        spfa();\n\n    }\n    private static void spfa() throws IOException {\n        Arrays.fill(d,INF);\n        Deque<Integer> q = new LinkedList<>();\n        q.offer(1);\n        d[1] = 0;\n        st[1] = true; // 用来判断是否在队列里面\n        while (!q.isEmpty()){\n            Integer k = q.poll();\n            st[k] = false;\n            for (int i = h[k]; i  != -1 ; i = ne[i]) {\n                int j = e[i];\n                if (d[j] > d[k] + w[i]){\n                    d[j] = d[k] + w[i];\n                    if (!st[j]){ // 只有没有在队列里面才会加入\n                        q.offer(j);\n                        st[j] = true;\n                    }\n                }\n            }\n        }\n        if (d[n] == INF) writer.write(\"impossible\");\n        else writer.write(d[n] +\"\");\n        writer.flush();\n     }\n\n    private static void add(int a,int b,int c){\n        e[idx] = b;\n        w[idx] = c;\n        ne[idx] = h[a];\n        h[a] = idx ++;\n    }\n}\n```\n\n**使用SPFA算法判断是否存在负环**\n\n需要在原来的基础上添加一个cnt数组，用来记录当前点到虚拟源点最短路的变数，初始都为0，当它大于等于n的时候那么肯定就存在一个环路了\n\n由于是求负环，所以不需要初始化d距离数组\n\n但是需要将所有的点都加入队列中，因为没有具体的开始点位\n\n``` java\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\n/**\n * @description: SPFA判断负环\n * @author: kudaompq\n * @date: 2022/1/17 14:45\n * @version: v1.0\n */\n\npublic class Main {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    static final int INF = 0x3f3f3f3f;\n    static final int N = (int)1e5 + 10;\n    static int[] h,e,ne,w,d,cnt;\n    static boolean[] st;\n    static int idx,n,m;\n\npublic static void main(String[] args) throws IOException {\n\n    String[] s = reader.readLine().split(\" \");\n    n = Integer.parseInt(s[0]);\n    m = Integer.parseInt(s[1]);\n    h = new int[n + 1];\n    e = new int[m + 1];\n    ne = new int[m + 1];\n    w = new int[m + 1];\n    st = new boolean[n + 1];\n    d = new int[n + 1];\n    cnt = new int[n + 1];\n    Arrays.fill(h,-1);\n    while (m -- > 0){\n        s = reader.readLine().split(\" \");\n        int a = Integer.parseInt(s[0]);\n        int b = Integer.parseInt(s[1]);\n        int c = Integer.parseInt(s[2]);\n        add(a,b,c);\n    }\n    if (spfa()) System.out.println(\"Yes\");\n    else System.out.println(\"No\");\n\n}\nprivate static boolean spfa() throws IOException {\n    Deque<Integer> q = new LinkedList<>();\n    for (int i = 1; i <= n; i++) {\n        q.offer(i);\n        st[i] = true;\n    }\n    while (!q.isEmpty()){\n        Integer k = q.poll();\n        st[k] = false;\n        for (int i = h[k]; i  != -1 ; i = ne[i]) {\n            int j = e[i];\n            if (d[j] > d[k] + w[i]){\n                d[j] = d[k] + w[i];\n                cnt[j] = cnt[k] + 1;\n                if (cnt[j] >= n) return true;\n                if (!st[j]){ // 只有没有在队列里面才会加入\n                    q.offer(j);\n                    st[j] = true;\n                }\n            }\n        }\n    }\n    return false;\n }\n\nprivate static void add(int a,int b,int c){\n    e[idx] = b;\n    w[idx] = c;\n    ne[idx] = h[a];\n    h[a] = idx ++;\n}\n```\n### Floyd算法\n\n用来解决多源最短路径问题\n\n**核心代码**\n\n```java\n    static void floyd(){\n        for (int t = 1; t <= n ; t++) {\n            for (int i = 1; i <= n ; i++) {\n                for (int j = 1; j <= n ; j++) {\n                    g[i][j] = Math.min(g[i][j],g[i][t] + g[t][j]);\n                }\n            }\n        }\n    }\n```\n\n> 模板\n\n```java\nimport java.io.*;\nimport java.util.Arrays;\n\n/**\n * @description: Floyd求最短路问题\n * @author: kudaompq\n * @date: 2022/1/17 17:13\n * @version: v1.0\n */\n\npublic class Floyd {\n\n    static int[][] g;\n    static int n,m,k;\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        k = Integer.parseInt(s[2]);\n        g = new int[n + 1][n + 1];\n        // 注意初始化，i,j相等的时候距离为0\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n ; j++) {\n                if (i == j) g[i][j] = 0;\n                else{\n                    g[i][j] = 0x3f3f3f3f;\n                }\n            }\n        }\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            int c = Integer.parseInt(s[2]);\n            g[a][b] = Math.min(g[a][b],c);\n        }\n        floyd();\n        while (k -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            // 只要是无穷就行\n            if (g[a][b] >  0x3f3f3f3f / 2) writer.write(\"impossible\\n\");\n            else writer.write(g[a][b] + \"\\n\");\n        }\n        writer.flush();\n\n    }\n\n    static void floyd(){\n        for (int t = 1; t <= n ; t++) {\n            for (int i = 1; i <= n ; i++) {\n                for (int j = 1; j <= n ; j++) {\n                    g[i][j] = Math.min(g[i][j],g[i][t] + g[t][j]);\n                }\n            }\n        }\n    }\n}\n```\n\n![image-20220118162435852](http://images.kudaompq.top/20220118162436.png)\n\n### Prim算法\n\nPrim算法和Dijkstra算法写法差不多\n\n1. 先找到未进入集合的最小点，（Dijkstra算法是从1号节点开始，因为Prim要找的最小的集合所以不用从1开始）\n2. 维护从该点到集合的距离\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: Prim\n * https://www.acwing.com/problem/content/860/\n * @author: kudaompq\n * @date: 2022/1/18 13:22\n * @version: v1.0\n */\n\npublic class Prim {\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static int[][] g;\n    static int[] d;\n    static boolean[] st;\n    static int n,m;\n    static final int INF = 0x3f3f3f3f;\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        g = new int[n + 1][n + 1];\n        d= new int[n + 1];\n        st = new boolean[n + 1];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(g[i + 1],INF);\n        }\n        while (m-- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            int c = Integer.parseInt(s[2]);\n            // 因为是无向图所以两个方向都要\n            g[a][b] = g[b][a] = Math.min(g[a][b],c);\n        }\n        int res = prim();\n        if (res == INF) System.out.println(\"impossible\");\n        else System.out.println(res);\n\n    }\n    static int prim(){\n        Arrays.fill(d,INF);\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int t = -1;\n            // 找到距离集合最小的点\n            for (int j = 1; j <= n ; j++) {\n                // 寻找未被使用的且最小的\n                if (!st[j] && ( t == -1 || d[t] > d[j] )){\n                    t = j;\n                }\n            }\n            if (i > 0 && d[t] == INF) return INF;\n            if (i > 0) {\n                // 第一个点只有一个点没有边所以不需要加入距离\n                res += d[t];\n            }\n            st[t] = true;\n            for (int j = 1; j <= n; j++) {\n                d[j] = Math.min(d[j],g[t][j]);\n            }\n        }\n        return res;\n    }\n}\n```\n\n### Kruskal算法\n\n可以看作是先将所有边按照权重进行从大到小的排序\n\n再通过并查集算法进行合并\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: Kruskal求最凶啊生成树\n * https://www.acwing.com/activity/content/problem/content/925/\n * @author: kudaompq\n * @date: 2022/1/18 14:16\n * @version: v1.0\n */\n\npublic class Kruskal {\n\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static Edge[] edges;\n    static int n,m;\n    static int[] p;\n\n\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        edges = new Edge[m];\n        p = new int[n + 1];\n        for (int i = 0; i < m; i++) {\n            s = reader.readLine().split(\" \");\n            int x = Integer.parseInt(s[0]);\n            int y = Integer.parseInt(s[1]);\n            int w = Integer.parseInt(s[2]);\n            edges[i] = new Edge(x,y,w);\n        }\n        // 先对所有边进行权重的排序\n        Arrays.sort(edges,(Edge a,Edge b) -> a.w - b.w);\n        for (int i = 0; i <= n ; i++) {\n            p[i] = i;\n        }\n        int res = 0; // 记录最小生成树的大小\n        int cnt = 0; // 记录最小生成树中节点的个数\n        for (int i = 0; i < m; i++) {\n            int x = edges[i].x , y = edges[i].y , w = edges[i].w;\n            int px = find(x);\n            int py = find(y);\n            if (px != py){\n                p[px] = py;\n                res += w;\n                cnt ++;\n                if (cnt == n - 1) break;\n            }\n        }\n        if (cnt != n - 1) System.out.println(\"impossible\");\n        else System.out.println(res);\n\n\n    }\n    static int find(int x){\n        if (p[x] != x) p[x] = find(p[x]);\n        return p[x];\n    }\n\n    static class Edge{\n        int x;\n        int y;\n        int w;\n\n\n        public Edge(int x, int y, int w) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n        }\n\n    }\n}\n```\n\n![image-20220118181436142](http://images.kudaompq.top/20220118181436.png)\n\n### 染色法判断二分图\n\n二分图性质：一定不含有奇数环，可能包含长度为偶数的环， 不一定是连通图\n\n**代码思路**\n\n- 染色用1，2区分不同颜色，用0表示未被染色\n- 遍历所有点，每次将未染色的点进行dfs，染色未1或者2\n- 只要某个点染色失败就不是二分图\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: 染色法判断二分图\n * @author: kudaompq\n * @date: 2022/1/18 15:11\n * @version: v1.0\n */\n\npublic class BipartiteGraph {\n\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static final int N = (int)2e5 + 10;\n    static int[] h,e,ne;\n    static int[] color;\n    static int n,m,idx;\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n = Integer.parseInt(s[0]);\n        m = Integer.parseInt(s[1]);\n        h = new int[N];\n        e = new int[N];\n        ne = new int[N];\n        color = new int[n + 1];\n        Arrays.fill(h,-1);\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            // 无向图两个方向都要\n            add(a,b);\n            add(b,a);\n        }\n        boolean flag = false;\n        for (int i = 1; i <= n ; i++) {\n            if (color[i] == 0){\n                if (!dfs(i,1)) {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        if(flag) System.out.println(\"No\");\n        else System.out.println(\"Yes\");\n\n\n    }\n\n    static boolean dfs(int u,int c){\n        color[u] = c;\n        for (int i = h[u]; i != -1 ; i = ne[i]) {\n            int j = e[i];\n            if (color[j] == 0){\n                if (!dfs(j,3 - c)) return false;\n            }\n            else if (color[j] == c) return false;\n        }\n        return true;\n    }\n    static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx++;\n    }\n}\n```\n\n### 匈牙利算法\n\n匈牙利算法可以用来求两个分组中的最多可能的配对数量\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\n/**\n * @description: 染色法判断二分图\n * @author: kudaompq\n * @date: 2022/1/18 15:11\n * @version: v1.0\n */\n\npublic class BipartiteGraph2 {\n\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    static int[] h,e,ne;\n    static int[] match; // 用来记录n2数组的配对的点\n    static boolean[] st;\n    static int n1,n2,m,idx;\n    public static void main(String[] args) throws IOException {\n        String[] s = reader.readLine().split(\" \");\n        n1 = Integer.parseInt(s[0]);\n        n2 = Integer.parseInt(s[1]);\n        m = Integer.parseInt(s[2]);\n        h = new int[n1 + 1];\n        e = new int[m + 1];\n        ne = new int[m + 1];\n        st = new boolean[n2 + 1];\n        match = new int[n2 + 1];\n        Arrays.fill(h,-1);\n        while (m -- > 0){\n            s = reader.readLine().split(\" \");\n            int a = Integer.parseInt(s[0]);\n            int b = Integer.parseInt(s[1]);\n            // 无向图两个方向都要\n            add(a,b);\n        }\n        int res = 0;\n        for (int i = 1; i <= n1 ; i++) {\n            // 每次需要恢复st的初始化状态\n            Arrays.fill(st,false);\n            if (find(i)) res ++;\n        }\n\n        System.out.println(res);\n    }\n    static boolean find(int x){\n        for (int i = h[x]; i != -1 ; i = ne[i]) {\n            int j = e[i];\n            if (!st[j]){\n                st[j] = true;\n                // 如果当前点还没有配对，或者配对j的的点还能配对其他店\n                if (match[j] == 0 || find(match[j])){\n                    match[j] = x;\n                    return true;\n                }\n            }\n        }\n        // 配对失败\n        return false;\n    }\n\n\n    static void add(int a,int b){\n        e[idx] = b;\n        ne[idx] = h[a];\n        h[a] = idx ++;\n    }\n}\n```\n', '', b'1', b'1', b'1', b'1', '2022-02-16 11:24:16', '2022-02-16 11:24:16', 0, 1, b'0');

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag`  (
  `blog_id` bigint(0) NOT NULL,
  `tag_id` bigint(0) NOT NULL
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES (7, 5);
INSERT INTO `blog_tag` VALUES (8, 6);
INSERT INTO `blog_tag` VALUES (9, 7);

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, '学习笔记');
INSERT INTO `category` VALUES (3, '项目开发');
INSERT INTO `category` VALUES (4, '技术杂烩');
INSERT INTO `category` VALUES (5, '心情随笔');

-- ----------------------------
-- Table structure for city_visitor
-- ----------------------------
DROP TABLE IF EXISTS `city_visitor`;
CREATE TABLE `city_visitor`  (
  `city` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '城市名称',
  `uv` int(0) NOT NULL COMMENT '独立访客数量',
  PRIMARY KEY (`city`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of city_visitor
-- ----------------------------

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮箱',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '评论内容',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '头像(图片路径)',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '评论时间',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论者ip地址',
  `is_published` bit(1) NOT NULL COMMENT '公开或回收站',
  `is_admin_comment` bit(1) NOT NULL COMMENT '博主回复',
  `page` int(0) NOT NULL COMMENT '0普通文章，1关于我页面，2友链页面',
  `is_notice` bit(1) NOT NULL COMMENT '接收邮件提醒',
  `blog_id` bigint(0) NULL DEFAULT NULL COMMENT '所属的文章',
  `parent_comment_id` bigint(0) NOT NULL COMMENT '父评论id，-1为根评论',
  `website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '个人网站',
  `qq` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '如果评论昵称为QQ号，则将昵称和头像置为QQ昵称和QQ头像，并将此字段置为QQ号备份',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (4, 'kudaompq', '1187873694@qq.com', '测试评论功能', 'http://images.kudaompq.top/20220104153619.jpg', '2022-02-03 23:50:25', '192.168.100.1', b'0', b'1', 1, b'0', NULL, -1, '/', NULL);

-- ----------------------------
-- Table structure for exception_log
-- ----------------------------
DROP TABLE IF EXISTS `exception_log`;
CREATE TABLE `exception_log`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求接口',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求方式',
  `param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作描述',
  `error` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '异常信息',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `create_time` datetime(0) NOT NULL COMMENT '操作时间',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of exception_log
-- ----------------------------
INSERT INTO `exception_log` VALUES (1, '/blog', 'GET', '{\"id\":1}', '查看博客', 'top.kudaompq.exception.NotFoundException: 该文章不存在\r\n	at top.kudaompq.service.impl.BlogServiceImpl.getBlogById(BlogServiceImpl.java:170)\r\n	at top.kudaompq.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ff8d7ded.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3687392d.getBlogById(<generated>)\r\n	at top.kudaompq.controller.BlogController.blog(BlogController.java:45)\r\n	at top.kudaompq.controller.BlogController$$FastClassBySpringCGLIB$$1a95e921.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\r\n	at top.kudaompq.aspect.VisitLogAspect.logAround(VisitLogAspect.java:73)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.BlogController$$EnhancerBySpringCGLIB$$956140c.blog(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 14:29:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (2, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.springframework.dao.DataIntegrityViolationException: Error attempting to get column \'ip\' from result set.  Cause: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\n; Cannot determine value type from string \'192.168.101.7\'; nested exception is java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:84)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy167.selectPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy168.selectPage(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:62)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$f1b91f95.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$2aaffb37.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:114)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)\r\n	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:96)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1422)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:699)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:705)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1140)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.proxy.jdbc.ResultSetProxyImpl.getBoolean(ResultSetProxyImpl.java:308)\r\n	at com.alibaba.druid.pool.DruidPooledResultSet.getBoolean(DruidPooledResultSet.java:265)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)\r\n	at com.sun.proxy.$Proxy221.getBoolean(Unknown Source)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:37)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:26)\r\n	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:85)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createUsingConstructor(DefaultResultSetHandler.java:710)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createByConstructorSignature(DefaultResultSetHandler.java:693)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:657)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:630)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:397)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)\r\n	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)\r\n	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)\r\n	at com.sun.proxy.$Proxy218.query(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:69)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:165)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:65)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\nCaused by: com.mysql.cj.exceptions.DataConversionException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:115)\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:47)\r\n	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.decodeByteArray(MysqlTextValueDecoder.java:143)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.decodeAndCreateReturnValue(AbstractResultsetRow.java:135)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.getValueFromBytes(AbstractResultsetRow.java:243)\r\n	at com.mysql.cj.protocol.a.result.ByteArrayRow.getValue(ByteArrayRow.java:91)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1301)\r\n	... 163 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:14:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (3, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.springframework.dao.DataIntegrityViolationException: Error attempting to get column \'ip\' from result set.  Cause: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\n; Cannot determine value type from string \'192.168.101.7\'; nested exception is java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:84)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy167.selectPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy168.selectPage(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:62)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$f1b91f95.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$2aaffb37.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:114)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)\r\n	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:96)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1422)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:699)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:705)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1140)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.proxy.jdbc.ResultSetProxyImpl.getBoolean(ResultSetProxyImpl.java:308)\r\n	at com.alibaba.druid.pool.DruidPooledResultSet.getBoolean(DruidPooledResultSet.java:265)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)\r\n	at com.sun.proxy.$Proxy221.getBoolean(Unknown Source)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:37)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:26)\r\n	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:85)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createUsingConstructor(DefaultResultSetHandler.java:710)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createByConstructorSignature(DefaultResultSetHandler.java:693)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:657)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:630)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:397)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)\r\n	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)\r\n	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)\r\n	at com.sun.proxy.$Proxy218.query(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:69)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:165)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:65)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\nCaused by: com.mysql.cj.exceptions.DataConversionException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:115)\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:47)\r\n	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.decodeByteArray(MysqlTextValueDecoder.java:143)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.decodeAndCreateReturnValue(AbstractResultsetRow.java:135)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.getValueFromBytes(AbstractResultsetRow.java:243)\r\n	at com.mysql.cj.protocol.a.result.ByteArrayRow.getValue(ByteArrayRow.java:91)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1301)\r\n	... 163 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:15:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (4, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.springframework.dao.DataIntegrityViolationException: Error attempting to get column \'ip\' from result set.  Cause: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\n; Cannot determine value type from string \'192.168.101.7\'; nested exception is java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:84)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy167.selectPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy168.selectPage(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:62)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$f1b91f95.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$2aaffb37.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:114)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)\r\n	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:96)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1422)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:699)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:705)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1140)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.proxy.jdbc.ResultSetProxyImpl.getBoolean(ResultSetProxyImpl.java:308)\r\n	at com.alibaba.druid.pool.DruidPooledResultSet.getBoolean(DruidPooledResultSet.java:265)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)\r\n	at com.sun.proxy.$Proxy221.getBoolean(Unknown Source)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:37)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:26)\r\n	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:85)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createUsingConstructor(DefaultResultSetHandler.java:710)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createByConstructorSignature(DefaultResultSetHandler.java:693)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:657)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:630)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:397)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)\r\n	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)\r\n	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)\r\n	at com.sun.proxy.$Proxy218.query(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:69)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:165)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:65)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\nCaused by: com.mysql.cj.exceptions.DataConversionException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:115)\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:47)\r\n	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.decodeByteArray(MysqlTextValueDecoder.java:143)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.decodeAndCreateReturnValue(AbstractResultsetRow.java:135)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.getValueFromBytes(AbstractResultsetRow.java:243)\r\n	at com.mysql.cj.protocol.a.result.ByteArrayRow.getValue(ByteArrayRow.java:91)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1301)\r\n	... 163 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:22:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (5, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.springframework.dao.DataIntegrityViolationException: Error attempting to get column \'ip\' from result set.  Cause: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\n; Cannot determine value type from string \'192.168.101.7\'; nested exception is java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:84)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\r\n	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy167.selectPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy168.selectPage(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:62)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$2c73685b.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$1994c74f.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.sql.SQLDataException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:114)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)\r\n	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)\r\n	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:96)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1422)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:699)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getBoolean(ResultSetImpl.java:705)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1140)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.filter.FilterAdapter.resultSet_getBoolean(FilterAdapter.java:1524)\r\n	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getBoolean(FilterChainImpl.java:1136)\r\n	at com.alibaba.druid.proxy.jdbc.ResultSetProxyImpl.getBoolean(ResultSetProxyImpl.java:308)\r\n	at com.alibaba.druid.pool.DruidPooledResultSet.getBoolean(DruidPooledResultSet.java:265)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)\r\n	at com.sun.proxy.$Proxy221.getBoolean(Unknown Source)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:37)\r\n	at org.apache.ibatis.type.BooleanTypeHandler.getNullableResult(BooleanTypeHandler.java:26)\r\n	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:85)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createUsingConstructor(DefaultResultSetHandler.java:710)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createByConstructorSignature(DefaultResultSetHandler.java:693)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:657)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:630)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:397)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)\r\n	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)\r\n	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)\r\n	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)\r\n	at com.sun.proxy.$Proxy218.query(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:69)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:165)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:65)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\nCaused by: com.mysql.cj.exceptions.DataConversionException: Cannot determine value type from string \'192.168.101.7\'\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:115)\r\n	at com.mysql.cj.result.BooleanValueFactory.createFromBytes(BooleanValueFactory.java:47)\r\n	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.decodeByteArray(MysqlTextValueDecoder.java:143)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.decodeAndCreateReturnValue(AbstractResultsetRow.java:135)\r\n	at com.mysql.cj.protocol.result.AbstractResultsetRow.getValueFromBytes(AbstractResultsetRow.java:243)\r\n	at com.mysql.cj.protocol.a.result.ByteArrayRow.getValue(ByteArrayRow.java:91)\r\n	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1301)\r\n	... 163 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:23:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (7, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy445.getLoginLogListByDate(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy446.getLoginLogListByDate(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:67)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$2c73685b.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$1994c74f.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:120)\r\n	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:3338)\r\n	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:121)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:560)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:524)\r\n	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)\r\n	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:39)\r\n	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:305)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:53)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:33:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (8, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy504.getLoginLogListByDate(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy505.getLoginLogListByDate(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:67)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$2c73685b.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$1994c74f.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:120)\r\n	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:3338)\r\n	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:121)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:560)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:524)\r\n	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)\r\n	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:39)\r\n	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:305)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:53)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:34:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `exception_log` VALUES (9, '/admin/loginLog/list', 'GET', '{\"date\":[],\"pageNum\":1,\"pageSize\":10}', '', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy101.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)\r\n	at com.sun.proxy.$Proxy504.getLoginLogListByDate(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\r\n	at com.sun.proxy.$Proxy505.getLoginLogListByDate(Unknown Source)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl.getLoginLogListByDate(LoginLogServiceImpl.java:67)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$FastClassBySpringCGLIB$$1d4113d4.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\r\n	at top.kudaompq.service.impl.LoginLogServiceImpl$$EnhancerBySpringCGLIB$$2c73685b.getLoginLogListByDate(<generated>)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController.list(LoginLogAdminController.java:28)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$FastClassBySpringCGLIB$$456fa36e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\r\n	at top.kudaompq.controller.admin.LoginLogAdminController$$EnhancerBySpringCGLIB$$1994c74f.list(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:112)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\r\n	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\r\n	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\r\n	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\r\n	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)\r\n	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\r\n	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1726)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.binding.BindingException: Parameter \'startDate\' not found. Available parameters are [startTime, page, endTime, param3, param1, param2]\r\n	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:120)\r\n	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:3338)\r\n	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:121)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)\r\n	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\r\n	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:560)\r\n	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:524)\r\n	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)\r\n	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32)\r\n	at java.util.ArrayList.forEach(ArrayList.java:1259)\r\n	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32)\r\n	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:39)\r\n	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:305)\r\n	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:53)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy217.query(Unknown Source)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 112 more\r\n', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-12 16:34:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');

-- ----------------------------
-- Table structure for friend
-- ----------------------------
DROP TABLE IF EXISTS `friend`;
CREATE TABLE `friend`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '描述',
  `website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '站点',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '头像',
  `is_published` bit(1) NOT NULL COMMENT '公开或隐藏',
  `views` int(0) NOT NULL COMMENT '点击次数',
  `create_time` datetime(0) NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of friend
-- ----------------------------
INSERT INTO `friend` VALUES (1, 'kudaompq', '一只摸鱼佬罢了', 'http://kudaompq.top', 'http://images.kudaompq.top/20220104153619.jpg', b'1', 0, '2022-02-02 16:38:36');

-- ----------------------------
-- Table structure for login_log
-- ----------------------------
DROP TABLE IF EXISTS `login_log`;
CREATE TABLE `login_log`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名称',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `status` bit(1) NULL DEFAULT NULL COMMENT '登录状态',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作描述',
  `create_time` datetime(0) NOT NULL COMMENT '登录时间',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of login_log
-- ----------------------------
INSERT INTO `login_log` VALUES (2, 'kudaompq', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', b'1', '登录成功', '2022-02-12 16:38:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `login_log` VALUES (3, 'kudaompq', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', b'1', '登录成功', '2022-02-14 21:09:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');

-- ----------------------------
-- Table structure for moment
-- ----------------------------
DROP TABLE IF EXISTS `moment`;
CREATE TABLE `moment`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '动态内容',
  `create_time` datetime(0) NOT NULL COMMENT '创建时间',
  `likes` int(0) NULL DEFAULT NULL COMMENT '点赞数量',
  `is_published` bit(1) NOT NULL COMMENT '是否公开',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of moment
-- ----------------------------
INSERT INTO `moment` VALUES (1, '### 测试Moment\n> 新年快乐', '2022-02-01 16:10:27', 1, b'0');
INSERT INTO `moment` VALUES (2, '晚风！！！\n<meting-js server=\"netease\" type=\"song\" id=\"1441758494\" theme=\"#25CCF7\"></meting-js>', '2022-02-15 11:53:43', 1, b'1');

-- ----------------------------
-- Table structure for operation_log
-- ----------------------------
DROP TABLE IF EXISTS `operation_log`;
CREATE TABLE `operation_log`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '操作者用户名',
  `uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求接口',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求方式',
  `param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作描述',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `times` int(0) NOT NULL COMMENT '请求耗时（毫秒）',
  `create_time` datetime(0) NOT NULL COMMENT '操作时间',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 76 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of operation_log
-- ----------------------------
INSERT INTO `operation_log` VALUES (49, 'kudaompq', '/admin/friend/published', 'PUT', '{\"id\":1,\"published\":false}', '修改友链公开状态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-12 16:03:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (51, 'kudaompq', '/admin/operationLog/delete', 'DELETE', '{\"id\":50}', '删除操作日志', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-12 16:08:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (52, 'kudaompq', '/admin/blog/save', 'POST', '', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 46, '2022-02-14 19:52:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (53, 'kudaompq', '/admin/blog/save', 'POST', '{\"blog\":{\"id\":null,\"title\":\"Github上传文件\",\"firstPicture\":\"https://cdn.jsdelivr.net/gh/Kudaompq/CDN/cover/20220214211941.png\",\"content\":\"# git上传文件\\n\\n1. **git clone** [github上的地址]\\n2. cd 文件夹\\n3. **git add .** \\n4. **git commit  -m  \\\"提交信息\\\"  （注：“提交信息”里面换成你需要，如“first commit”）**\\n5. **git push -u origin main**\\n\\n> 由于Github在21年七夕节的更新，需要使用token才能上传\\n\\n[获取TOKEN地址](https://github.com/settings/tokens)\\n\\n然后输入下方命令\\n\\n```bash\\ngit remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git\\n <your_token>：换成你自己得到的token\\n <USERNAME>：是你自己github的用户名\\n <REPO>：是你的仓库名称\\n```\\n\\n\",\"description\":\"\",\"published\":true,\"recommend\":true,\"appreciation\":true,\"commentEnabled\":true,\"top\":false,\"createTime\":null,\"updateTime\":null,\"views\":null,\"category\":null,\"tags\":[],\"categoryId\":1,\"tagList\":[1]}}', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 23, '2022-02-14 21:22:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (54, 'kudaompq', '/admin/tag/save', 'POST', '{\"tag\":{\"id\":5,\"name\":\"Git\"}}', '添加标签', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 7, '2022-02-14 21:22:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (55, 'kudaompq', '/admin/category/save', 'POST', '{\"category\":{\"id\":4,\"name\":\"技术杂烩\",\"count\":null}}', '保存分类', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 8, '2022-02-14 21:23:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (56, 'kudaompq', '/admin/category/save', 'POST', '{\"category\":{\"id\":5,\"name\":\"心情随笔\",\"count\":null}}', '保存分类', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 8, '2022-02-14 21:23:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (57, 'kudaompq', '/admin/blog/save', 'POST', '', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 7, '2022-02-14 21:24:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (58, 'kudaompq', '/admin/moment/publish', 'PUT', '{\"id\":1,\"published\":false}', '修改动态发布状态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:29:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (59, 'kudaompq', '/admin/blog/save', 'POST', '', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 15, '2022-02-14 21:34:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `operation_log` VALUES (60, 'kudaompq', '/admin/moment/save', 'POST', '', '保存动态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 11:53:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (61, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 在校大三学生一枚\\n* 平时喜欢打打球，LOL\\n* 坐标: 沈阳\\n\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-15 12:07:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (62, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 在校大三学生一枚\\n* 平时喜欢打打球，LOL\\n* 坐标📍: 沈阳\\n\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:08:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (63, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 我：在校大三学生一枚\\n* 目标：Do Yourself\\n* 爱好✨：摸鱼🐟！平时也喜欢打打球🏀还有LOL\\n* 坐标📍: 沈阳\\n\\n## 关于这个博客\\n一直都想写一个自己的博客，原来使用hexo搭建的，总算是在寒假把博客写出来了，前端基本上都是参考[Naccl](https://naccl.top/home)的，十分感谢！\\n自用博客只要不忙会一直更新维护的💪！\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:13:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (64, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 我😎：在校大三学生一枚\\n* 目标✍：Do Yourself\\n* 爱好✨：摸鱼🐟！平时也喜欢打打球🏀还有LOL\\n* 坐标📍: 沈阳\\n\\n## 关于这个博客\\n一直都想写一个自己的博客，原来使用hexo搭建的，总算是在寒假把博客写出来了，前端基本上都是参考[Naccl](https://naccl.top/home)的，十分感谢！\\n自用博客只要不忙会一直更新维护的💪！\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 12:29:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (65, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 我😎：在校大三学生一枚\\n* 目标✍：Do Yourself\\n* 爱好✨：摸鱼🐟！平时也喜欢打打球🏀还有LOL\\n* 坐标📍: 沈阳\\n\\n## 关于这个博客\\n一直都想写一个自己的博客，原来是用hexo搭建的，总算是在寒假把博客写出来了，前端基本上都是参考[Naccl](https://naccl.top/home)的，十分感谢！\\\\n自用博客只要不忙会一直更新维护的💪！\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:30:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (66, 'kudaompq', '/admin/about', 'PUT', '{\"about\":{\"title\":\"关于帅气的 Kudaompq\",\"musicId\":\"1441758494\",\"content\":\"# 目前可以公布的信息\\n* 我😎：在校大三学生一枚\\n* 目标✍：Do Yourself\\n* 爱好✨：摸鱼🐟！平时也喜欢打打球🏀还有LOL\\n* 坐标📍: 沈阳\\n\\n## 关于这个博客\\n一直都想写一个自己的博客，原来是用hexo搭建的，总算是在寒假把博客写出来了，前端基本上都是参考[Naccl](https://naccl.top/home)的，十分感谢！</br>自用博客只要不忙会一直更新维护的💪！\",\"commentEnabled\":true}}', '修改关于我页面', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 12:30:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (67, 'kudaompq', '/admin/friend/published', 'PUT', '{\"id\":1,\"published\":true}', '修改友链公开状态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:35:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (68, 'kudaompq', '/admin/friend/published', 'PUT', '{\"id\":1,\"published\":false}', '修改友链公开状态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:35:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (69, 'kudaompq', '/admin/friend/published', 'PUT', '{\"id\":1,\"published\":true}', '修改友链公开状态', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:36:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (70, 'kudaompq', '/admin/tag/save', 'POST', '{\"tag\":{\"id\":6,\"name\":\"Vue\"}}', '添加标签', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 12, '2022-02-15 12:43:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (71, 'kudaompq', '/admin/blog/save', 'POST', '{\"blog\":{\"id\":null,\"title\":\"Vue学习\",\"firstPicture\":\"http://images.kudaompq.top/20211014144121.png\",\"content\":\"\\n# VUE简介\\n\\nVue (读音 /vjuː/，类似于 **view**) 是一套用于构建用户界面的**渐进式框架**。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与[现代化的工具链](https://cn.vuejs.org/v2/guide/single-file-components.html)以及各种[支持类库](https://github.com/vuejs/awesome-vue#libraries--plugins)结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\\n\\n> 特点\\n\\n1. 采用组件化模式，提高代码复用率，代码更好维护\\n2. 声明式编程，编码人员直接操作DOM，提高开发效率\\n\\n# Vue核心\\n\\n\\n\\n## el和data\\n\\n**el的两种写法**\\n\\n```javascript\\nVue.config.productionTip = false;\\nconst v = new Vue({\\n    // el: \'#root\' , // 方法一\\n    data: {\\n        name: \'kudaompq\',\\n\\n    }\\n})\\nconsole.log(v);\\nv.$mount(\'#root\') // 方法二\\n```\\n\\n**data的两种写法**\\n\\n```javascript\\nconst v = new Vue({\\n    el: \'#root\' ,\\n    // data:{\\n    // \\tname: \\\"kudaompq\\\"  // 声明式\\n    // }\\n    data: function(){\\n        return {\\n            name: \\\"kudaompq\\\"  //函数式\\n        }\\n    }\\n})\\n```\\n\\n由vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了\\n\\n## MVVM模型\\n\\n1. M：模型（Model）：对应data中的数据\\n2. V：视图（View) ：模板\\n3. VM：视图模板（ViewModel）：Vue实例对象\\n\\n![image-20211022140014347](http://images.kudaompq.top/20211022140014.png)\\n\\n特点：\\n\\n1. data中所有的属性，最后都出现在vm身上\\n2. vm身上所有的属性 以及Vue原型上所有属性，在Vue模板中都可以直接使用\\n\\n## Object.DefineProperty方法\\n\\n**相当于vue中data的底层原理**\\n\\n```javascript\\n    <script>\\n        let number = 18;\\n        let person = {\\n            name: \'张三\',\\n            sex: \'男\'\\n        }\\n        Object.defineProperty(person,\\\"age\\\",{\\n            // value: 18  ,\\n            // enumerable: true, // 控制属性是否可以枚举，默认值是false\\n            // writable: true, // 控制属性是否可以被重写\\n            // configurable: true //控制属性是否可以被删除，默认值是false\\n            get(){\\n                console.log(\\\"有人读取age了\\\")\\n                return number;\\n            },\\n            set(value){\\n                console.log(\\\"有人修改了age值，且值是\\\",value);\\n                number = value;\\n            }\\n\\n        })\\n        console.log(person);\\n    </script>\\n```\\n', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 47, '2022-02-15 12:44:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (72, 'kudaompq', '/admin/tag/save', 'POST', '{\"tag\":{\"id\":7,\"name\":\"Algorithm\"}}', '添加标签', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 34, '2022-02-16 11:24:05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (73, 'kudaompq', '/admin/blog/save', 'POST', '{\"blog\":{\"id\":null,\"title\":\"Kudaompq的算法模板\",\"firstPicture\":\"http://images.kudaompq.top/20211231105616.png\",\"content\":\"## 基础算法\\n\\n### 输入模板\\n\\nJava输入最好使用BufferedReader来进行输入，效率会比Scanner提高将近十倍\\n\\n```java\\nBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\nint n = Integer.parseInt(reader.readLine());  // 获取单个数据\\nString[] temp = reader.readLine().split(\\\" \\\"); // 获取数据数据\\n```\\n\\n### 快排模板\\n\\n```java\\npublic static void quick_sort(int[] q,int l,int r){\\n    if (l >= r) return;\\n    // 确定分界点x，初始化i,j下标\\n    int x = q[l] , i = l - 1 , j = r + 1;\\n    while(i < j){\\n        // 每次循环前先++，这就是上面i = l - 1 的原因\\n        do i ++; while (q[i] < x);\\n        do j --; while (q[j] > x);\\n        if (i < j) {int tmp = q[i] ; q[i] = q[j] ; q[j] = tmp ;}\\n    }\\n    // 左区间递归继续排序\\n    quick_sort(q,l,j);\\n    // 右区间递归继续排序\\n    quick_sort(q,j + 1 ,r);\\n}\\n```\\n\\n### 归并模板\\n\\n```java\\npublic static void merge_sort(int[] q,int l,int r){\\n\\n    if (l >= r) return;\\n    int mid = l + r >> 1; // 相当于 (l + r) / 2\\n    // 先拆分\\n    merge_sort(q , l , mid);\\n    merge_sort(q ,mid + 1 , r);\\n\\n    // 再合并\\n    // 确定起点终点\\n    int k = 0, i = l ,j = mid + 1;\\n    // 当在边界内时，比较大小进行排序\\n    while(i <= mid && j <= r){\\n        if (q[i] < q[j]) tmp[k ++] = q[i ++];\\n        else tmp[k ++] = q[j ++];\\n    }\\n    // 当两个分段中有一个没有分配完，就接着分配\\n    while(i <= mid) tmp[k++] = q[i++];\\n    while (j <= r) tmp[k++] = q[j++];\\n\\n    // 将临时数组的值传给原数组q\\n    for (i = l , j = 0 ; i <= r ; i++ , j++) {\\n        q[i] = tmp[j];\\n    }\\n\\n}\\n```\\n\\n### 二分查找\\n\\n> 标准模板\\n\\n```java\\n// q是有序数组，l是左起点，r是右起点，x是期望找到的值   \\n// 求上界\\n    public static int upper_bound(int[] q,int l,int r,int x){\\n        while(l < r){\\n            int mid = l + r + 1>> 1;\\n            if (q[mid] <= x) l = mid;\\n            else r = mid - 1;\\n        }\\n        return l;\\n    }\\n\\n    // 求下界\\n    public static int lower_bound(int[] q,int l ,int r, int x){\\n        while (l < r){\\n            int mid = l + r >> 1;\\n            if (q[mid] >= x)  r', '保存博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 60, '2022-02-16 11:24:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (74, 'kudaompq', '/admin/blog/delete', 'DELETE', '{\"id\":5}', '删除博客', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 18, '2022-02-16 11:24:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `operation_log` VALUES (75, 'kudaompq', '/admin/siteSetting/update', 'POST', '{\"map\":{\"settings\":[{\"id\":1,\"nameEn\":\"webTitleSuffix\",\"nameZh\":\"网页标题后缀\",\"value\":\" - Kudaompq\'s Blog\",\"type\":1},{\"id\":2,\"nameEn\":\"blogName\",\"nameZh\":\"博客名称\",\"value\":\"Kudaompq\'s Blog\",\"type\":1},{\"id\":5,\"nameEn\":\"copyright\",\"nameZh\":\"Copyright\",\"value\":\"{\\\"title\\\":\\\"©2020 - 2022 By Kudaompq\\\"}\",\"type\":1},{\"id\":6,\"nameEn\":\"beian\",\"nameZh\":\"ICP备案号\",\"value\":\"浙ICP备2021005046号-1\",\"type\":1},{\"id\":25,\"nameEn\":\"reward\",\"nameZh\":\"赞赏码路径\",\"value\":\"http://images.kudaompq.top/20220211191703.jpg\",\"type\":1},{\"id\":26,\"nameEn\":\"commentAdminFlag\",\"nameZh\":\"博主评论标识\",\"value\":\"摸鱼佬\",\"type\":1},{\"id\":13,\"nameEn\":\"badge\",\"nameZh\":\"徽标\",\"value\":\"{\\\"title\\\":\\\"本站点采用 CC BY 4.0 国际许可协议进行许可\\\",\\\"url\\\":\\\"https://creativecommons.org/licenses/by/4.0/\\\",\\\"subject\\\":\\\"CC\\\",\\\"value\\\":\\\"BY 4.0\\\",\\\"color\\\":\\\"lightgray\\\"}\",\"type\":2},{\"id\":14,\"nameEn\":\"avatar\",\"nameZh\":\"头像\",\"value\":\"http://images.kudaompq.top/20220104153619.jpg\",\"type\":3},{\"id\":15,\"nameEn\":\"name\",\"nameZh\":\"昵称\",\"value\":\"Kudaompq\",\"type\":3},{\"id\":16,\"nameEn\":\"rollText\",\"nameZh\":\"个性签名\",\"value\":\"Do Yourself\",\"type\":3},{\"id\":17,\"nameEn\":\"github\",\"nameZh\":\"GitHub地址\",\"value\":\"https://github.com/Kudaompq\",\"type\":3},{\"id\":18,\"nameEn\":\"qq\",\"nameZh\":\"QQ链接\",\"value\":\"1187873694\",\"type\":3},{\"id\":19,\"nameEn\":\"bilibili\",\"nameZh\":\"bilibili链接\",\"value\":\"https://space.bilibili.com/\",\"type\":3},{\"id\":20,\"nameEn\":\"netease\",\"nameZh\":\"网易云音乐\",\"value\":\"https://music.163.com/#/user/home?id=119570185\",\"type\":3},{\"id\":21,\"nameEn\":\"email\",\"nameZh\":\"email\",\"value\":\"1187873694@qq.com\",\"type\":3}],\"deleteIds\":[12,8,7,11]}}', '更新站点信息', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 45, '2022-02-16 11:25:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');

-- ----------------------------
-- Table structure for schedule_job
-- ----------------------------
DROP TABLE IF EXISTS `schedule_job`;
CREATE TABLE `schedule_job`  (
  `job_id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT '任务id',
  `bean_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'spring bean名称',
  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '方法名',
  `params` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '参数',
  `cron` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'cron表达式',
  `status` tinyint(0) NULL DEFAULT NULL COMMENT '任务状态',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`job_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of schedule_job
-- ----------------------------
INSERT INTO `schedule_job` VALUES (1, 'redisSyncScheduleTask', 'syncBlogViewsToDatabase', '', '0 0 1 * * ?', 1, '每天凌晨一点，从Redis将博客浏览量同步到数据库', '2020-11-17 23:45:42');
INSERT INTO `schedule_job` VALUES (2, 'visitorSyncScheduleTask', 'syncVisitInfoToDatabase', '', '0 0 0 * * ?', 1, '清空当天Redis访客标识，记录当天的PV和UV，更新当天所有访客的PV和最后访问时间，更新城市新增访客UV数', '2021-02-05 08:14:28');

-- ----------------------------
-- Table structure for schedule_job_log
-- ----------------------------
DROP TABLE IF EXISTS `schedule_job_log`;
CREATE TABLE `schedule_job_log`  (
  `log_id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT '任务日志id',
  `job_id` bigint(0) NOT NULL COMMENT '任务id',
  `bean_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'spring bean名称',
  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '方法名',
  `params` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '参数',
  `status` tinyint(0) NOT NULL COMMENT '任务执行结果',
  `error` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '异常信息',
  `times` int(0) NOT NULL COMMENT '耗时（单位：毫秒）',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`log_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of schedule_job_log
-- ----------------------------

-- ----------------------------
-- Table structure for site_setting
-- ----------------------------
DROP TABLE IF EXISTS `site_setting`;
CREATE TABLE `site_setting`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `name_en` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `name_zh` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `type` int(0) NULL DEFAULT NULL COMMENT '1基础设置，2页脚徽标，3资料卡，4友链信息',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of site_setting
-- ----------------------------
INSERT INTO `site_setting` VALUES (1, 'webTitleSuffix', '网页标题后缀', ' - Kudaompq\'s Blog', 1);
INSERT INTO `site_setting` VALUES (2, 'blogName', '博客名称', 'Kudaompq\'s Blog', 1);
INSERT INTO `site_setting` VALUES (5, 'copyright', 'Copyright', '{\"title\":\"©2020 - 2022 By Kudaompq\"}', 1);
INSERT INTO `site_setting` VALUES (6, 'beian', 'ICP备案号', '浙ICP备2021005046号-1', 1);
INSERT INTO `site_setting` VALUES (13, 'badge', '徽标', '{\"title\":\"本站点采用 CC BY 4.0 国际许可协议进行许可\",\"url\":\"https://creativecommons.org/licenses/by/4.0/\",\"subject\":\"CC\",\"value\":\"BY 4.0\",\"color\":\"lightgray\"}', 2);
INSERT INTO `site_setting` VALUES (14, 'avatar', '头像', 'http://images.kudaompq.top/20220104153619.jpg', 3);
INSERT INTO `site_setting` VALUES (15, 'name', '昵称', 'Kudaompq', 3);
INSERT INTO `site_setting` VALUES (16, 'rollText', '个性签名', 'Do Yourself', 3);
INSERT INTO `site_setting` VALUES (17, 'github', 'GitHub地址', 'https://github.com/Kudaompq', 3);
INSERT INTO `site_setting` VALUES (18, 'qq', 'QQ链接', '1187873694', 3);
INSERT INTO `site_setting` VALUES (19, 'bilibili', 'bilibili链接', 'https://space.bilibili.com/', 3);
INSERT INTO `site_setting` VALUES (20, 'netease', '网易云音乐', 'https://music.163.com/#/user/home?id=119570185', 3);
INSERT INTO `site_setting` VALUES (21, 'email', 'email', '1187873694@qq.com', 3);
INSERT INTO `site_setting` VALUES (25, 'reward', '赞赏码路径', 'http://images.kudaompq.top/20220211191703.jpg', 1);
INSERT INTO `site_setting` VALUES (26, 'commentAdminFlag', '博主评论标识', '摸鱼佬', 1);
INSERT INTO `site_setting` VALUES (27, 'friendContent', '友链页面信息', '<h1 id=\"欢迎来到本站\">欢迎来到本站</h1>\n<p>随机排序，不分先后。欢迎交换友链~(￣▽￣)~*</p>\n<ul>\n<li>昵称：Kudaompq</li>\n<li>一句话：Do Yourself。</li>\n<li>网址：<a href=\"http://www.kudaompq.top\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.kudaompq.top</a></li>\n<li>头像URL：<a href=\"http://images.kudaompq.top/20220104153619.jpg\" target=\"_blank\" rel=\"external nofollow noopener\">http://images.kudaompq.top/20220104153619.jpg</a></li>\n</ul>\n<p>仅凭个人喜好添加友链，请在收到我的回复邮件后再于贵站添加本站链接。原则上已添加的友链不会删除，如果你发现自己被移除了，恕不另行通知，只需和我一样做就好。</p>\n', 4);
INSERT INTO `site_setting` VALUES (28, 'friendCommentEnabled', '友链页面评论开关', '1', 4);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `color` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签颜色(可选)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (1, 'java', NULL);
INSERT INTO `tag` VALUES (4, 'Mysql', NULL);
INSERT INTO `tag` VALUES (5, 'Git', NULL);
INSERT INTO `tag` VALUES (6, 'Vue', NULL);
INSERT INTO `tag` VALUES (7, 'Algorithm', NULL);

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '头像地址',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮箱',
  `create_time` datetime(0) NOT NULL COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL COMMENT '更新时间',
  `role` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色访问权限',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, 'kudaompq', '8956b8c00c6cf94380ef5fd93745de6a', 'kudaompq', 'http://images.kudaompq.top/20220104153619.jpg', '1187873694@qq.com', '2022-01-30 14:58:17', '2022-01-30 14:58:23', 'admin');

-- ----------------------------
-- Table structure for visit_log
-- ----------------------------
DROP TABLE IF EXISTS `visit_log`;
CREATE TABLE `visit_log`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '访客标识码',
  `uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求接口',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求方式',
  `param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求参数',
  `behavior` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '访问行为',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '访问内容',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `times` int(0) NOT NULL COMMENT '请求耗时（毫秒）',
  `create_time` datetime(0) NOT NULL COMMENT '访问时间',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 409 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visit_log
-- ----------------------------
INSERT INTO `visit_log` VALUES (190, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 60, '2022-02-12 23:03:30', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (191, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-12 23:03:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (192, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 57, '2022-02-12 23:03:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (194, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 10, '2022-02-12 23:06:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (195, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-12 23:07:00', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (196, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-12 23:07:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (197, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.100.1', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-12 23:07:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (198, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 16, '2022-02-14 20:08:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (199, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 2, '2022-02-14 20:08:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (200, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 76, '2022-02-14 20:08:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (201, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 11, '2022-02-14 20:08:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (202, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 7, '2022-02-14 20:08:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (203, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 7, '2022-02-14 20:08:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (204, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:03:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (205, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:03:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (206, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-14 21:09:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (207, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:09:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (208, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 12, '2022-02-14 21:09:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (209, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-14 21:09:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (210, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-14 21:24:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (211, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:24:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (212, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:24:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (213, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:24:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (214, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 7, '2022-02-14 21:25:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (215, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:25:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (216, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:25:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (217, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 13, '2022-02-14 21:25:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (218, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 8, '2022-02-14 21:25:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (219, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 18, '2022-02-14 21:25:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (220, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:26:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (221, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:26:37', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (222, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:26:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (223, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:27:19', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (224, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 2, '2022-02-14 21:27:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (225, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:27:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (226, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:27:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (227, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 1, '2022-02-14 21:27:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (228, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:27:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (229, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:29:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (230, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 23, '2022-02-14 21:29:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (231, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 8, '2022-02-14 21:29:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (232, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:29:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (233, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 43, '2022-02-14 21:31:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (234, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 2, '2022-02-14 21:31:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (235, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:31:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (236, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 12, '2022-02-14 21:31:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (237, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 2, '2022-02-14 21:31:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (238, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:32:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (239, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 10, '2022-02-14 21:32:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (240, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:32:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (241, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:33:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (242, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:33:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (243, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 8, '2022-02-14 21:33:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (244, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 4, '2022-02-14 21:33:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (245, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:33:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (246, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 6, '2022-02-14 21:33:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (247, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 42, '2022-02-14 21:35:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (248, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 2, '2022-02-14 21:35:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (249, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 39, '2022-02-14 21:36:30', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (250, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 11, '2022-02-14 21:36:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (251, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:36:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (252, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:36:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (253, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":5}', '查看博客', '测试文章', '文章标题：测试文章', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 9, '2022-02-14 21:36:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (254, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 5, '2022-02-14 21:36:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (255, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":5}', '查看博客', '测试文章', '文章标题：测试文章', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', 3, '2022-02-14 21:36:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');
INSERT INTO `visit_log` VALUES (256, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 393, '2022-02-15 11:46:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (257, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 14, '2022-02-15 11:46:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (258, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 11:46:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (259, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 11:46:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (260, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 11:46:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (261, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 14, '2022-02-15 11:46:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (262, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 20, '2022-02-15 11:46:50', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (263, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 11:46:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (264, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-15 11:53:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (265, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/like/2', 'POST', '{\"id\":2}', '点赞动态', '', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 11:54:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (266, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-15 11:54:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (267, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:54:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (268, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 12, '2022-02-15 11:54:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (269, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-15 11:55:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (270, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 11:55:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (271, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 0, '2022-02-15 11:56:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (272, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:56:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (273, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 11:56:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (274, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 11:56:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (275, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 11:57:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (276, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 11:57:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (277, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:57:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (278, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 11:57:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (279, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:57:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (280, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 11:58:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (281, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:58:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (282, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 11:58:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (283, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 11:58:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (284, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 11:58:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (285, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 11:58:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (286, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 11:58:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (287, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 11:58:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (288, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 11:58:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (289, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 11:58:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (290, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:02:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (291, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:07:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (292, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 12:07:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (293, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:08:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (294, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 12:13:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (295, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:14:07', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (296, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:14:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (297, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:14:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (298, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:14:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (299, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:14:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (300, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:14:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (301, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:14:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (302, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:14:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (303, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:14:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (304, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 12:17:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (305, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:17:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (306, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 12:17:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (307, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-15 12:18:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (308, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:18:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (309, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:18:50', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (310, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:19:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (311, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:20:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (312, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:20:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (313, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:23:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (314, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:23:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (315, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:23:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (316, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:24:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (317, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:25:00', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (318, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:25:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (319, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:26:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (320, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:26:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (321, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:26:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (322, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:27:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (323, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:27:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (324, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:27:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (325, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:27:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (326, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:27:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (327, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:27:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (328, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:27:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (329, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:27:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (330, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:30:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (331, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:30:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (332, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:30:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (333, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:30:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (334, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:32:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (335, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 17, '2022-02-15 12:35:50', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (336, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:35:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (337, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 14, '2022-02-15 12:36:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (338, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 12:36:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (339, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:36:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (340, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:36:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (341, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-15 12:44:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (342, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 12:44:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (343, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":8}', '查看博客', 'Vue学习', '文章标题：Vue学习', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 26, '2022-02-15 12:44:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (344, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":8}', '查看博客', 'Vue学习', '文章标题：Vue学习', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 12, '2022-02-15 12:47:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (345, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":8}', '查看博客', 'Vue学习', '文章标题：Vue学习', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 17, '2022-02-15 12:48:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (346, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-15 12:48:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (347, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":5}', '查看博客', '测试文章', '文章标题：测试文章', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:48:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (348, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-15 12:48:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (349, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:50:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (350, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:50:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (351, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:50:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (352, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:50:05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (353, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:50:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (354, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:50:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (355, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:50:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (356, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:50:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (357, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:50:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (358, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 11, '2022-02-15 12:50:30', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (359, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:50:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (360, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:50:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (361, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":7}', '查看博客', 'Github上传文件', '文章标题：Github上传文件', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:50:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (362, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-15 12:51:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (363, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-15 12:52:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (364, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":4}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:52:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (365, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:52:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (366, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-15 12:52:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (367, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:52:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (368, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 6, '2022-02-15 12:52:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (369, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 1, '2022-02-15 12:52:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (370, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:52:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (371, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:52:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (372, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 3, '2022-02-15 12:52:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (373, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 29, '2022-02-16 11:25:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (374, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 25, '2022-02-16 11:25:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (375, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 13, '2022-02-16 11:34:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (376, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 74, '2022-02-16 12:16:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (377, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 16, '2022-02-16 12:16:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (378, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-16 12:17:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (379, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 18, '2022-02-16 12:17:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (380, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 28, '2022-02-16 12:17:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (381, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/about', 'GET', '{}', '访问页面', '关于我', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-16 12:17:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (382, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 5, '2022-02-16 12:18:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (383, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":8}', '查看博客', 'Vue学习', '文章标题：Vue学习', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 17, '2022-02-16 12:18:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (384, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 14, '2022-02-16 12:18:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (385, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 156, '2022-02-16 12:21:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (386, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 64, '2022-02-16 12:22:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (387, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 12, '2022-02-16 12:22:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (388, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 13, '2022-02-16 12:22:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (389, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 10, '2022-02-16 12:22:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (390, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 76, '2022-02-16 12:23:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (391, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 49, '2022-02-16 12:24:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (392, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 8, '2022-02-16 12:24:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (393, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 386, '2022-02-16 12:26:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (394, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 55, '2022-02-16 12:27:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (395, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 79, '2022-02-16 12:29:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (396, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 373, '2022-02-16 12:31:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (397, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 66, '2022-02-16 12:31:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (398, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 357, '2022-02-16 12:47:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (399, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 66, '2022-02-16 12:47:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (400, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/tag/blogList', 'GET', '{\"pageNum\":1,\"id\":7}', '查看标签', NULL, '标签名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 12, '2022-02-16 12:47:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (401, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog/list', 'GET', '{\"pageNum\":1}', '访问页面', '首页', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 11, '2022-02-16 12:47:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (402, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/blog', 'GET', '{\"id\":9}', '查看博客', 'Kudaompq的算法模板', '文章标题：Kudaompq的算法模板', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-16 12:47:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (403, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/archive', 'GET', '{}', '访问页面', '归档', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 2, '2022-02-16 12:47:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (404, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":3}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 7, '2022-02-16 12:47:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (405, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":5}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 4, '2022-02-16 12:47:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (406, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/category/blogList', 'GET', '{\"pageNum\":1,\"id\":1}', '查看分类', NULL, '分类名称：null，第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 9, '2022-02-16 12:47:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (407, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/friend/list', 'GET', '{}', '访问页面', '友链', '', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 18, '2022-02-16 12:47:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');
INSERT INTO `visit_log` VALUES (408, '360dbc35-807e-31ac-a94f-712de5dde8cb', '/moment/list', 'GET', '{\"pageNum\":1}', '访问页面', '动态', '第1页', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.102', 17, '2022-02-16 12:47:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36');

-- ----------------------------
-- Table structure for visit_record
-- ----------------------------
DROP TABLE IF EXISTS `visit_record`;
CREATE TABLE `visit_record`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `pv` int(0) NOT NULL COMMENT '访问量',
  `uv` int(0) NOT NULL COMMENT '独立用户',
  `date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '日期\"02-23\"',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visit_record
-- ----------------------------
INSERT INTO `visit_record` VALUES (1, 113, 4, '02-11');

-- ----------------------------
-- Table structure for visitor
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '访客标识码',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `create_time` datetime(0) NOT NULL COMMENT '首次访问时间',
  `last_time` datetime(0) NOT NULL COMMENT '最后访问时间',
  `pv` int(0) NULL DEFAULT NULL COMMENT '访问页数统计',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitor
-- ----------------------------
INSERT INTO `visitor` VALUES (4, '360dbc35-807e-31ac-a94f-712de5dde8cb', '192.168.101.7', '内网IP|内网IP', 'Windows 10', 'Chrome 98.0.4758.82', '2022-02-11 19:27:11', '2022-02-11 20:33:17', 66, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36');

SET FOREIGN_KEY_CHECKS = 1;
